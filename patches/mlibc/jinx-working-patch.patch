diff --git mlibc-clean/abis/ironclad/signal.h mlibc-workdir/abis/ironclad/signal.h
index 74069d5..ce727b4 100644
--- mlibc-clean/abis/ironclad/signal.h
+++ mlibc-workdir/abis/ironclad/signal.h
@@ -48,18 +48,21 @@ typedef void (*__sighandler) (int);
 #define SIGTTOU 18
 #define SIGUSR1 19
 #define SIGUSR2 20
-#define SIGIO   21
-#define SIGPOLL SIGIO
+#define SIGPOLL 21
 #define SIGPROF 22
 #define SIGSYS  23
-#define SIGCANCEL SIGSYS
 #define SIGTRAP 24
 #define SIGURG  25
 #define SIGVTALRM 26
 #define SIGXCPU 27
 #define SIGXFSZ 28
-#define SIGWINCH 29
-#define SIGPWR  30
+
+/* These values are not kernel-related, and are emulated for userland by the */
+/* libc, we will map them to SIGUSR2, which userland wont be able to use. */
+#define SIGCANCEL SIGUSR2
+#define SIGWINCH SIGUSR2
+#define SIGIO    SIGUSR2
+#define SIGPWR   SIGUSR2
 
 /* siginfo->si_info constants */
 /* SIGBUS */
diff --git mlibc-clean/meson.build mlibc-workdir/meson.build
index eae40c4..b7b9dee 100644
--- mlibc-clean/meson.build
+++ mlibc-workdir/meson.build
@@ -76,6 +76,10 @@ if not headers_only
 	add_project_arguments('-fno-rtti', '-fno-exceptions', language: 'cpp')
 	add_project_link_arguments('-nostdlib', language: ['c', 'cpp'])
 
+	if get_option('buildtype').startswith('debug')
+		add_project_arguments('-DDEBUG', language : ['c', 'cpp'])
+	endif
+
 	if not freestnd_c_hdrs_dep.found()
 		searchdirs = run_command(c_compiler.cmd_array(), '-print-search-dirs',
 					check: true).stdout()
diff --git mlibc-clean/options/glibc/generic/execinfo.cpp mlibc-workdir/options/glibc/generic/execinfo.cpp
index 3474615..1ce0414 100644
--- mlibc-clean/options/glibc/generic/execinfo.cpp
+++ mlibc-workdir/options/glibc/generic/execinfo.cpp
@@ -2,8 +2,7 @@
 #include <bits/ensure.h>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git mlibc-clean/options/posix/generic/posix_string.cpp mlibc-workdir/options/posix/generic/posix_string.cpp
index 838b85b..8b0beec 100644
--- mlibc-clean/options/posix/generic/posix_string.cpp
+++ mlibc-workdir/options/posix/generic/posix_string.cpp
@@ -94,8 +94,6 @@ char *strsignal(int sig) {
 	CASE_FOR(SIGSEGV)
 	CASE_FOR(SIGTERM)
 	CASE_FOR(SIGPROF)
-	CASE_FOR(SIGIO)
-	CASE_FOR(SIGPWR)
 	CASE_FOR(SIGALRM)
 	CASE_FOR(SIGBUS)
 	CASE_FOR(SIGCHLD)
@@ -116,7 +114,6 @@ char *strsignal(int sig) {
 	CASE_FOR(SIGVTALRM)
 	CASE_FOR(SIGXCPU)
 	CASE_FOR(SIGXFSZ)
-	CASE_FOR(SIGWINCH)
 	default:
 		mlibc::infoLogger() << "mlibc: Unknown signal number " << sig << frg::endlog;
 		s = "Unknown signal number";
diff --git mlibc-clean/options/posix/include/unistd.h mlibc-workdir/options/posix/include/unistd.h
index 97bbaae..34bc025 100644
--- mlibc-clean/options/posix/include/unistd.h
+++ mlibc-workdir/options/posix/include/unistd.h
@@ -103,135 +103,105 @@ extern "C" {
 #define _PC_FILESIZEBITS 9
 #define _PC_SYMLINK_MAX 10
 
+/* Kernel-supported ABI SC flags */
+/* TODO: This should be moved to its own abi but the mlibc people wont let */
+/* me do so without CBT. */
+#define _SC_PAGESIZE         1
+#define _SC_OPEN_MAX         2
+#define _SC_HOST_NAME_MAX    3
+#define _SC_AVPHYS_PAGES     4
+#define _SC_PHYS_PAGES       5
+#define _SC_NPROCESSORS_ONLN 6
+#define _SC_TOTAL_PAGES      7
+#define _SC_LIST_PROCS       8
+#define _SC_LIST_MOUNTS      9
+#define _SC_UNAME            10
+#define _SC_CHILD_MAX        11
+#define _SC_LIST_THREADS     12
+#define _SC_LIST_CLUSTERS    13
+#define _SC_LIST_NETINTER    14
+#define _SC_DUMPLOGS         15
+#define _SC_NGROUPS_MAX      16
+#define _SC_SYMLOOP_MAX      17
+
+/* SC Aliases */
+#define _SC_PAGE_SIZE _SC_PAGESIZE
+
+/* The rest of libc-emulated SC macros */
 /* MISSING: remaining _SC_macros */
-#define _SC_ARG_MAX 0
-#define _SC_CHILD_MAX 1
-#define _SC_CLK_TCK 2
-#define _SC_NGROUPS_MAX 3
-#define _SC_OPEN_MAX 4
-#define _SC_STREAM_MAX 5
-#define _SC_TZNAME_MAX 6
-#define _SC_JOB_CONTROL 7
-
-#define _SC_SAVED_IDS 8
-#define _SC_REALTIME_SIGNALS 9
-#define _SC_PRIORITY_SCHEDULING 10
-#define _SC_TIMERS 11
-#define _SC_ASYNCHRONOUS_IO 12
-#define _SC_PRIORITIZED_IO 13
-#define _SC_SYNCHRONIZED_IO 14
-#define _SC_FSYNC 15
-#define _SC_MAPPED_FILES 16
-#define _SC_MEMLOCK 17
-#define _SC_MEMLOCK_RANGE 18
-#define _SC_MEMORY_PROTECTION 19
-#define _SC_MESSAGE_PASSING 20
-#define _SC_SEMAPHORES 21
-#define _SC_SHARED_MEMORY_OBJECTS 22
-#define _SC_AIO_LISTIO_MAX 23
-#define _SC_AIO_MAX 24
-#define _SC_AIO_PRIO_DELTA_MAX 25
-#define _SC_DELAYTIMER_MAX 26
-#define _SC_MQ_OPEN_MAX 27
-#define _SC_MQ_PRIO_MAX 28
-#define _SC_VERSION 29
-#define _SC_PAGE_SIZE 30
-#define _SC_PAGESIZE _SC_PAGE_SIZE
-#define _SC_RTSIG_MAX 31
-#define _SC_SEM_NSEMS_MAX 32
-#define _SC_SEM_VALUE_MAX 33
-#define _SC_SIGQUEUE_MAX 34
-#define _SC_TIMER_MAX 35
-#define _SC_BC_BASE_MAX 36
-#define _SC_BC_DIM_MAX 37
-#define _SC_BC_SCALE_MAX 38
-#define _SC_BC_STRING_MAX 39
-#define _SC_COLL_WEIGHTS_MAX 40
-#define _SC_EXPR_NEST_MAX 42
-#define _SC_LINE_MAX 43
-#define _SC_RE_DUP_MAX 44
-#define _SC_2_VERSION 46
-#define _SC_2_C_BIND 47
-#define _SC_2_C_DEV 48
-#define _SC_2_FORT_DEV 49
-#define _SC_2_FORT_RUN 50
-#define _SC_2_SW_DEV 51
-#define _SC_2_LOCALEDEF 52
-#define _SC_IOV_MAX 60
-#define _SC_UIO_MAXIOV _SC_IOV_MAX
-#define _SC_THREADS 67
-#define _SC_THREAD_SAFE_FUNCTIONS 68
-#define _SC_GETGR_R_SIZE_MAX 69
-#define _SC_GETPW_R_SIZE_MAX 70
-#define _SC_LOGIN_NAME_MAX 71
-#define _SC_TTY_NAME_MAX 72
-#define _SC_THREAD_DESTRUCTOR_ITERATIONS 73
-#define _SC_THREAD_KEYS_MAX 74
-#define _SC_THREAD_STACK_MIN 75
-#define _SC_THREAD_THREADS_MAX 76
-#define _SC_THREAD_ATTR_STACKADDR 77
-#define _SC_THREAD_ATTR_STACKSIZE 78
-#define _SC_THREAD_PRIORITY_SCHEDULING 79
-#define _SC_THREAD_PRIO_INHERIT 80
-#define _SC_THREAD_PRIO_PROTECT 81
-#define _SC_THREAD_PROCESS_SHARED 82
-#define _SC_NPROCESSORS_CONF 83
-#define _SC_NPROCESSORS_ONLN 84
-#define _SC_PHYS_PAGES 85
-#define _SC_AVPHYS_PAGES 86
-#define _SC_ATEXIT_MAX 87
-#define _SC_PASS_MAX 88
-#define _SC_XOPEN_VERSION 89
-#define _SC_XOPEN_XCU_VERSION 90
-#define _SC_XOPEN_UNIX 91
-#define _SC_XOPEN_CRYPT 92
-#define _SC_XOPEN_ENH_I18N 93
-#define _SC_XOPEN_SHM 94
-#define _SC_2_CHAR_TERM 95
-#define _SC_2_UPE 97
-#define _SC_XOPEN_XPG2 98
-#define _SC_XOPEN_XPG3 99
-#define _SC_XOPEN_XPG4 100
-#define _SC_NZERO 109
-#define _SC_XBS5_ILP32_OFF32 125
-#define _SC_XBS5_ILP32_OFFBIG 126
-#define _SC_XBS5_LP64_OFF64 127
-#define _SC_XBS5_LPBIG_OFFBIG 128
-#define _SC_XOPEN_LEGACY 129
-#define _SC_XOPEN_REALTIME 130
-#define _SC_XOPEN_REALTIME_THREADS 131
-#define _SC_ADVISORY_INFO 132
-#define _SC_BARRIERS 133
-#define _SC_CLOCK_SELECTION 137
-#define _SC_CPUTIME 138
-#define _SC_THREAD_CPUTIME 139
-#define _SC_MONOTONIC_CLOCK 149
-#define _SC_READER_WRITER_LOCKS 153
-#define _SC_SPIN_LOCKS 154
-#define _SC_REGEXP 155
-#define _SC_SHELL 157
-#define _SC_SPAWN 159
-#define _SC_SPORADIC_SERVER 160
-#define _SC_THREAD_SPORADIC_SERVER 161
-#define _SC_TIMEOUTS 164
-#define _SC_TYPED_MEMORY_OBJECTS 165
-#define _SC_2_PBS 168
-#define _SC_2_PBS_ACCOUNTING 169
-#define _SC_2_PBS_LOCATE 170
-#define _SC_2_PBS_MESSAGE 171
-#define _SC_2_PBS_TRACK 172
-#define _SC_SYMLOOP_MAX 173
-#define _SC_STREAMS 174
-#define _SC_2_PBS_CHECKPOINT 175
-#define _SC_V6_ILP32_OFF32 176
-#define _SC_V6_ILP32_OFFBIG 177
-#define _SC_V6_LP64_OFF64 178
-#define _SC_V6_LPBIG_OFFBIG 179
-#define _SC_HOST_NAME_MAX 180
-#define _SC_TRACE 181
-#define _SC_TRACE_EVENT_FILTER 182
-#define _SC_TRACE_INHERIT 183
-#define _SC_TRACE_LOG 184
+#define _SC_ARG_MAX                      18
+#define _SC_GETPW_R_SIZE_MAX             19
+#define _SC_GETGR_R_SIZE_MAX             20
+#define _SC_CLK_TCK                      21
+#define _SC_VERSION                      22
+#define _SC_SAVED_IDS                    23
+#define _SC_JOB_CONTROL                  24
+#define _SC_LINE_MAX                     25
+#define _SC_XOPEN_CRYPT                  26
+#define _SC_NPROCESSORS_CONF             27
+#define _SC_TTY_NAME_MAX                 28
+#define _SC_RE_DUP_MAX                   29
+#define _SC_ATEXIT_MAX                   30
+#define _SC_LOGIN_NAME_MAX               31
+#define _SC_THREAD_DESTRUCTOR_ITERATIONS 32
+#define _SC_THREAD_KEYS_MAX              33
+#define _SC_THREAD_STACK_MIN             34
+#define _SC_THREAD_THREADS_MAX           35
+#define _SC_TZNAME_MAX                   36
+#define _SC_ASYNCHRONOUS_IO              37
+#define _SC_FSYNC                        38
+#define _SC_MAPPED_FILES                 39
+#define _SC_MEMLOCK                      40
+#define _SC_MEMLOCK_RANGE                41
+#define _SC_MEMORY_PROTECTION            42
+#define _SC_MESSAGE_PASSING              43
+#define _SC_PRIORITY_SCHEDULING          44
+#define _SC_REALTIME_SIGNALS             45
+#define _SC_SEMAPHORES                   46
+#define _SC_SHARED_MEMORY_OBJECTS        47
+#define _SC_SYNCHRONIZED_IO              48
+#define _SC_THREADS                      49
+#define _SC_THREAD_ATTR_STACKADDR        50
+#define _SC_THREAD_ATTR_STACKSIZE        51
+#define _SC_THREAD_PRIORITY_SCHEDULING   52
+#define _SC_THREAD_PRIO_INHERIT          53
+#define _SC_THREAD_PRIO_PROTECT          54
+#define _SC_THREAD_PROCESS_SHARED        55
+#define _SC_THREAD_SAFE_FUNCTIONS        56
+#define _SC_TIMERS                       57
+#define _SC_TIMER_MAX                    58
+#define _SC_2_CHAR_TERM                  59
+#define _SC_2_C_BIND                     60
+#define _SC_2_C_DEV                      61
+#define _SC_2_FORT_DEV                   62
+#define _SC_2_FORT_RUN                   63
+#define _SC_2_LOCALEDEF                  64
+#define _SC_2_SW_DEV                     65
+#define _SC_2_UPE                        66
+#define _SC_2_VERSION                    67
+#define _SC_CLOCK_SELECTION              68
+#define _SC_CPUTIME                      69
+#define _SC_THREAD_CPUTIME               70
+#define _SC_MONOTONIC_CLOCK              71
+#define _SC_READER_WRITER_LOCKS          72
+#define _SC_SPIN_LOCKS                   73
+#define _SC_REGEXP                       74
+#define _SC_SHELL                        75
+#define _SC_SPAWN                        76
+#define _SC_2_PBS                        78
+#define _SC_2_PBS_ACCOUNTING             79
+#define _SC_2_PBS_LOCATE                 80
+#define _SC_2_PBS_TRACK                  81
+#define _SC_2_PBS_MESSAGE                82
+#define _SC_STREAM_MAX                   83
+#define _SC_AIO_LISTIO_MAX               84
+#define _SC_AIO_MAX                      85
+#define _SC_DELAYTIMER_MAX               86
+#define _SC_MQ_OPEN_MAX                  88
+#define _SC_MQ_PRIO_MAX                  89
+#define _SC_RTSIG_MAX                    90
+#define _SC_SIGQUEUE_MAX                 91
+#define _SC_IOV_MAX                      92
 
 #define STDERR_FILENO 2
 #define STDIN_FILENO 0
diff --git mlibc-clean/options/rtld/generic/linker.cpp mlibc-workdir/options/rtld/generic/linker.cpp
index 848f7de..fbbb07f 100644
--- mlibc-clean/options/rtld/generic/linker.cpp
+++ mlibc-workdir/options/rtld/generic/linker.cpp
@@ -582,18 +582,27 @@ frg::expected<LinkerError, void> ObjectRepository::_fetchFromFile(SharedObject *
 
 				void *map_pointer;
 				if(mlibc::sys_vm_map(reinterpret_cast<void *>(map_address),
-						total_map_size, prot | PROT_WRITE,
+						total_map_size, PROT_WRITE,
 						MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0, &map_pointer))
 					__ensure(!"sys_vm_map failed");
 
 				__ensure(trySeek(fd, phdr->p_offset));
 				__ensure(tryReadExactly(fd, reinterpret_cast<char *>(map_address) + misalign,
 						phdr->p_filesz));
+
+				if (prot & PROT_EXEC) {
+					prot = PROT_READ | PROT_EXEC;
+				}
+				if (mlibc::sys_vm_protect(reinterpret_cast<void *>(map_address), total_map_size, prot)) {
+					__ensure(!"vm_protect not feeling all there");
+				}
 			#endif
 			// Take care of removing superfluous permissions.
+			/*
 			if(mlibc::sys_vm_protect && ((prot & PROT_WRITE) == 0))
 				if(mlibc::sys_vm_protect(map_pointer, total_map_size, prot))
 					mlibc::infoLogger() << "mlibc: sys_vm_protect() failed in ld.so" << frg::endlog;
+			*/
 		}else if(phdr->p_type == PT_TLS) {
 			object->tlsSegmentSize = phdr->p_memsz;
 			object->tlsAlignment = phdr->p_align;
diff --git mlibc-clean/sysdeps/ironclad/generic/generic.cpp mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
index 197411a..1fbf389 100644
--- mlibc-clean/sysdeps/ironclad/generic/generic.cpp
+++ mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
@@ -1318,8 +1318,172 @@ int sys_statvfs(const char *path, struct statvfs *out) {
 	return 0;
 }
 
-int sys_getcwd(char *, size_t) {
-	__builtin_trap();
+int sys_getcwd(char *buf, size_t size) {
+  int fd = AT_FDCWD;
+  bool fd_needs_closing = false;
+  DIR *dirstream = NULL;
+  dev_t rootdev, thisdev;
+  ino_t rootino, thisino;
+  char *dir;
+  register char *dirp;
+  struct stat st;
+  size_t used;
+
+  if (size == 0 || buf == NULL) {
+      return EINVAL;
+  }
+
+  dir = buf;
+
+  dirp = dir + size;
+  *--dirp = '\0';
+
+  if (lstat (".", &st) < 0)
+    goto lose;
+  thisdev = st.st_dev;
+  thisino = st.st_ino;
+
+  if (lstat ("/", &st) < 0)
+    goto lose;
+  rootdev = st.st_dev;
+  rootino = st.st_ino;
+
+  while (!(thisdev == rootdev && thisino == rootino))
+    {
+      struct dirent *d;
+      dev_t dotdev;
+      ino_t dotino;
+      bool mount_point;
+      int parent_status;
+      size_t dirroom;
+      size_t namlen;
+      bool use_d_ino = true;
+
+      /* Look at the parent directory.  */
+      fd = openat (fd, "..", O_RDONLY);
+      if (fd < 0)
+        goto lose;
+      fd_needs_closing = true;
+      parent_status = fstat (fd, &st);
+      if (parent_status != 0)
+        goto lose;
+
+      if (dirstream && closedir (dirstream) != 0)
+        {
+          dirstream = NULL;
+          goto lose;
+        }
+
+      /* Figure out if this directory is a mount point.  */
+      dotdev = st.st_dev;
+      dotino = st.st_ino;
+      mount_point = dotdev != thisdev;
+
+      /* Search for the last directory.  */
+      dirstream = fdopendir (fd);
+      if (dirstream == NULL)
+        goto lose;
+      fd_needs_closing = false;
+      for (;;)
+        {
+          /* Clear errno to distinguish EOF from error if readdir returns
+             NULL.  */
+          errno = 0;
+          d = readdir (dirstream);
+
+          /* When we've iterated through all directory entries without finding
+             one with a matching d_ino, rewind the stream and consider each
+             name again, but this time, using lstat.  This is necessary in a
+             chroot on at least one system (glibc-2.3.6 + linux 2.6.12), where
+             .., ../.., ../../.., etc. all had the same device number, yet the
+             d_ino values for entries in / did not match those obtained
+             via lstat.  */
+          if (d == NULL && errno == 0 && use_d_ino)
+            {
+              use_d_ino = false;
+              rewinddir (dirstream);
+              d = readdir (dirstream);
+            }
+
+          if (d == NULL)
+            {
+              if (errno == 0)
+                /* EOF on dirstream, which can mean e.g., that the current
+                   directory has been removed.  */
+                errno = ENOENT;
+              goto lose;
+            }
+          if (d->d_name[0] == '.' &&
+              (d->d_name[1] == '\0' ||
+               (d->d_name[1] == '.' && d->d_name[2] == '\0')))
+            continue;
+
+          if (use_d_ino)
+            {
+              bool match = ((d->d_ino == thisino) || mount_point);
+              if (! match)
+                continue;
+            }
+
+          {
+            int entry_status;
+            entry_status = fstatat (fd, d->d_name, &st, AT_SYMLINK_NOFOLLOW);
+
+            /* We don't fail here if we cannot stat() a directory entry.
+               This can happen when (network) file systems fail.  If this
+               entry is in fact the one we are looking for we will find
+               out soon as we reach the end of the directory without
+               having found anything.  */
+            if (entry_status == 0 && S_ISDIR (st.st_mode)
+                && st.st_dev == thisdev && st.st_ino == thisino)
+              break;
+          }
+        }
+
+      dirroom = dirp - dir;
+      namlen = strlen (d->d_name);
+
+      if (dirroom <= namlen)
+        {
+          errno = ERANGE;
+          goto lose;
+        }
+      dirp -= namlen;
+      memcpy (dirp, d->d_name, namlen);
+      *--dirp = '/';
+
+      thisdev = dotdev;
+      thisino = dotino;
+    }
+
+  if (dirstream && closedir (dirstream) != 0)
+    {
+      dirstream = NULL;
+      goto lose;
+    }
+
+  if (dirp == &dir[size - 1])
+    *--dirp = '/';
+
+  used = dir + size - dirp;
+  memmove (dir, dirp, used);
+
+  return 0;
+
+ memory_exhausted:
+  errno = ENOMEM;
+ lose:
+  {
+    int save = errno;
+    if (dirstream)
+      closedir (dirstream);
+
+    if (fd_needs_closing)
+      close (fd);
+
+    errno = save;
+  }
+  return 1;
 }
 #endif
 } // namespace mlibc
