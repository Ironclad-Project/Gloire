diff --git mlibc-clean/abis/ironclad/fcntl.h mlibc-workdir/abis/ironclad/fcntl.h
index d1e9f02..0e60dd2 100644
--- mlibc-clean/abis/ironclad/fcntl.h
+++ mlibc-workdir/abis/ironclad/fcntl.h
@@ -8,6 +8,7 @@
 #define O_RDWR   3
 #define O_SEARCH 4
 #define O_EXEC   7
+#define O_CLOEXEC 16
 
 // This flags are stubs.
 #define O_APPEND 0x00008
@@ -21,7 +22,6 @@
 #define O_DSYNC 0x00800
 #define O_RSYNC 0x01000
 #define O_SYNC 0x02000
-#define O_CLOEXEC 0x04000
 #define O_PATH 0x08000
 #define O_LARGEFILE 0x10000
 #define O_NOATIME 0x20000
diff --git mlibc-clean/options/posix/generic/unistd-stubs.cpp mlibc-workdir/options/posix/generic/unistd-stubs.cpp
index 96feaa2..09ec4ee 100644
--- mlibc-clean/options/posix/generic/unistd-stubs.cpp
+++ mlibc-workdir/options/posix/generic/unistd-stubs.cpp
@@ -684,8 +684,8 @@ unsigned long sysconf(int number) {
 			return mlibc::page_size;
 		case _SC_OPEN_MAX:
 			// TODO: actually return a proper value for _SC_OPEN_MAX
-			mlibc::infoLogger() << "\e[31mmlibc: sysconf(_SC_OPEN_MAX) returns arbitrary value 256\e[39m" << frg::endlog;
-			return 256;
+			mlibc::infoLogger() << "\e[31mmlibc: sysconf(_SC_OPEN_MAX) returns arbitrary value 100\e[39m" << frg::endlog;
+			return 100;
 		case _SC_PHYS_PAGES:
 			// TODO: actually return a proper value for _SC_PHYS_PAGES
 			mlibc::infoLogger() << "\e[31mmlibc: sysconf(_SC_PHYS_PAGES) returns arbitrary value 1024\e[39m" << frg::endlog;
diff --git mlibc-clean/sysdeps/ironclad/generic/generic.cpp mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
index d6dbca3..ecdaf01 100644
--- mlibc-clean/sysdeps/ironclad/generic/generic.cpp
+++ mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
@@ -10,6 +10,8 @@
 #include <string.h>
 #include <stdio.h>
 #include <sys/syscall.h>
+#include <sys/ironclad.h>
+#include <sched.h>
 
 namespace mlibc {
 
@@ -39,7 +41,7 @@ void sys_exit(int status) {
 
 int sys_tcb_set(void *pointer) {
 	int ret, errno;
-	SYSCALL1(SYSCALL_SET_TCB, pointer);
+	SYSCALL2(SYSCALL_ARCH_PRCTL, 1, pointer);
 	return errno;
 }
 
@@ -136,12 +138,10 @@ int sys_sigaction(int signum, const struct sigaction *act, struct sigaction *old
 }
 
 int sys_fcntl(int fd, int request, va_list args, int *result) {
-	(void)fd;
-	(void)request;
-	(void)args;
-	(void)result;
-	mlibc::infoLogger() << "fcntl() is a stub!" << frg::endlog;
-	return 0;
+	int ret, errno;
+	SYSCALL3(SYSCALL_FCNTL, fd, request, va_arg(args, uint64_t));
+	*result = ret;
+	return errno;
 }
 
 int sys_sigprocmask(int how, const sigset_t *__restrict set, sigset_t *__restrict retrieve) {
@@ -181,9 +181,12 @@ int sys_pselect(int num_fds, fd_set *read_set, fd_set *write_set, fd_set *except
 }
 
 int sys_isatty(int fd) {
-	(void)fd;
-	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
-	return 0;
+	struct termios t;
+	if (sys_tcgetattr(fd, &t) == 0) {
+		return 0;
+	} else {
+		return ENOTTY;
+	}
 }
 
 uid_t sys_getuid() {
@@ -234,17 +237,19 @@ int sys_execve(const char *path, char *const argv[], char *const envp[]) {
 }
 
 int sys_fork(pid_t *child) {
-    pid_t ret;
-    int errno;
+	pid_t ret;
+	int errno;
 
-    SYSCALL0(SYSCALL_FORK);
+	SYSCALL0(SYSCALL_FORK);
 
-    if (ret == -1) {
-        return errno;
-    }
+	if (ret == -1) {
+		return errno;
+	}
 
-    *child = ret;
-    return 0;
+	if (child != NULL) {
+		*child = ret;
+	}
+	return 0;
 }
 
 int sys_waitpid(pid_t pid, int *status, int flags, struct rusage *ru, pid_t *ret_pid) {
@@ -495,3 +500,25 @@ int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat
 
 #endif
 } // namespace mlibc
+
+extern "C" {
+// Syscalls for ironclad.h
+int get_thread_sched(void) {
+	int ret, errno;
+	SYSCALL0(SYSCALL_GET_THREAD_SCHED);
+	return ret;
+}
+
+int set_thread_sched(int flags) {
+	int ret, errno;
+	SYSCALL1(SYSCALL_SET_THREAD_SCHED, flags);
+	return ret;
+}
+
+pid_t program_spawn(const char *path, char *const argv[], char *const envp[]) {
+	pid_t ret;
+	int errno;
+	SYSCALL3(SYSCALL_SPAWN, path, argv, envp);
+	return ret;
+}
+}
diff --git mlibc-clean/sysdeps/ironclad/include/sys/ironclad.h mlibc-workdir/sysdeps/ironclad/include/sys/ironclad.h
index 89a3851..96a8589 100644
--- mlibc-clean/sysdeps/ironclad/include/sys/ironclad.h
+++ mlibc-workdir/sysdeps/ironclad/include/sys/ironclad.h
@@ -11,16 +11,10 @@ extern "C" {
 #define FB_DIMENSIONS 1
 
 struct ironclad_fb_dimensions {
-	uint16_t width;
-	uint16_t height;
-	uint16_t pitch;
-	uint16_t bpp;
-	uint8_t  red_mask_size;
-	uint8_t  red_mask_shift;
-	uint8_t  green_mask_size;
-	uint8_t  green_mask_shift;
-	uint8_t  blue_mask_size;
-	uint8_t  blue_mask_shift;
+	uint32_t width;
+	uint32_t height;
+	uint32_t pitch;
+	uint8_t  bpp;
 };
 
 #define PS2MOUSE_2_1_SCALING     1
@@ -34,6 +28,18 @@ struct ironclad_mouse_data {
 	bool is_left;
 	bool is_right;
 };
+
+// Syscalls declared on the documentation, but without libc equivalents.
+// Implemented in generic.cpp
+#define THREAD_RT     0b0001
+#define THREAD_MONO   0b0010
+#define THREAD_MLOCK  0b0100
+#define THREAD_BANNED 0b1000
+int get_thread_sched(void);
+int set_thread_sched(int flags);
+
+pid_t program_spawn(const char *path, char *const argv[], char *const envp[]);
+
 #ifdef __cplusplus
 }
 #endif
diff --git mlibc-clean/sysdeps/ironclad/include/sys/syscall.h mlibc-workdir/sysdeps/ironclad/include/sys/syscall.h
index 28d233e..1b6c659 100644
--- mlibc-clean/sysdeps/ironclad/include/sys/syscall.h
+++ mlibc-workdir/sysdeps/ironclad/include/sys/syscall.h
@@ -49,7 +49,7 @@
 })
 
 #define SYSCALL_EXIT               0
-#define SYSCALL_SET_TCB            1
+#define SYSCALL_ARCH_PRCTL         1
 #define SYSCALL_OPEN               2
 #define SYSCALL_CLOSE              3
 #define SYSCALL_READ               4
@@ -76,5 +76,9 @@
 #define SYSCALL_DUP2              25
 #define SYSCALL_DUP3              26
 #define SYSCALL_ACCESS            27
+#define SYSCALL_GET_THREAD_SCHED  28
+#define SYSCALL_SET_THREAD_SCHED  29
+#define SYSCALL_FCNTL             30
+#define SYSCALL_SPAWN             31
 
 #endif // _SYSCALL_H
