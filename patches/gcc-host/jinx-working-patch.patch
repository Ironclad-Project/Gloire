diff --git gcc-host-clean/fixincludes/mkfixinc.sh gcc-host-workdir/fixincludes/mkfixinc.sh
index df90720..c7df202 100755
--- gcc-host-clean/fixincludes/mkfixinc.sh
+++ gcc-host-workdir/fixincludes/mkfixinc.sh
@@ -12,6 +12,7 @@ target=fixinc.sh
 # Check for special fix rules for particular targets
 case $machine in
     i?86-*-cygwin* | \
+    *-*-*-mlibc | \
     i?86-*-mingw32* | \
     x86_64-*-mingw32* | \
     powerpc-*-eabisim* | \
diff --git gcc-host-workdir/gcc/config/i386/ironclad.h gcc-host-workdir/gcc/config/i386/ironclad.h
new file mode 100644
index 0000000..e0e4a79
--- /dev/null
+++ gcc-host-workdir/gcc/config/i386/ironclad.h
@@ -0,0 +1,29 @@
+#undef TARGET_IRONCLAD
+#define TARGET_IRONCLAD 1
+
+#undef LIB_SPEC
+#define LIB_SPEC "-lc"
+
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC "%{!shared:crt0.o%s} crti.o%s %{shared|static-pie|pie|!no-pie:crtbeginS.o%s;:crtbegin.o%s}"
+
+#undef ENDFILE_SPEC
+#define ENDFILE_SPEC "%{shared|static-pie|pie|!no-pie:crtendS.o%s;:crtend.o%s} crtn.o%s"
+
+#define GNU_USER_LINK_EMULATION32 "elf_i386"
+#define GNU_USER_LINK_EMULATION64 "elf_x86_64"
+#define GNU_USER_LINK_EMULATIONX32 "elf32_x86_64"
+
+#define GNU_USER_DYNAMIC_LINKER32 "/does_not_exist"
+#define GNU_USER_DYNAMIC_LINKER64 "/usr/lib/ld.so"
+#define GNU_USER_DYNAMIC_LINKERX32 "/does_not_exist"
+
+#undef TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()         \
+  do {                                   \
+    builtin_define ("__ironclad__");    \
+    builtin_define ("__unix__");         \
+    builtin_assert ("system=ironclad"); \
+    builtin_assert ("system=unix");      \
+    builtin_assert ("system=posix");     \
+  } while (0);
diff --git gcc-host-workdir/gcc/config/riscv/ironclad.h gcc-host-workdir/gcc/config/riscv/ironclad.h
new file mode 100644
index 0000000..b7a3ba6
--- /dev/null
+++ gcc-host-workdir/gcc/config/riscv/ironclad.h
@@ -0,0 +1,45 @@
+#undef TARGET_IRONCLAD
+#define TARGET_IRONCLAD 1
+
+#undef LIB_SPEC
+#define LIB_SPEC "-lc"
+
+#define LD_EMUL_SUFFIX \
+  "%{mabi=lp64d:}" \
+  "%{mabi=lp64f:_lp64f}" \
+  "%{mabi=lp64:_lp64}" \
+  "%{mabi=ilp32d:}" \
+  "%{mabi=ilp32f:_ilp32f}" \
+  "%{mabi=ilp32:_ilp32}"
+
+#define GNU_USER_LINK_EMULATION "elf64lriscv"
+#define GNU_USER_DYNAMIC_LINKER "/usr/lib/ld.so"
+
+#define LINK_SPEC "\
+-melf" XLEN_SPEC DEFAULT_ENDIAN_SPEC "riscv" LD_EMUL_SUFFIX " \
+%{mno-relax:--no-relax} \
+%{mbig-endian:-EB} \
+%{mlittle-endian:-EL} \
+%{shared} \
+  %{!shared: \
+    %{!static: \
+      %{!static-pie: \
+	%{rdynamic:-export-dynamic} \
+	-dynamic-linker " GNU_USER_DYNAMIC_LINKER "}} \
+    %{static:-static} %{static-pie:-static -pie --no-dynamic-linker -z text}}"
+
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC "%{!shared:crt0.o%s} crti.o%s %{shared|static-pie|pie|!no-pie:crtbeginS.o%s;:crtbegin.o%s}"
+
+#undef ENDFILE_SPEC
+#define ENDFILE_SPEC "%{shared|static-pie|pie|!no-pie:crtendS.o%s;:crtend.o%s} crtn.o%s"
+
+#undef TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()         \
+  do {                                   \
+    builtin_define ("__ironclad__");    \
+    builtin_define ("__unix__");         \
+    builtin_assert ("system=ironclad"); \
+    builtin_assert ("system=unix");      \
+    builtin_assert ("system=posix");     \
+  } while (0);
diff --git gcc-host-clean/gcc/config.build gcc-host-workdir/gcc/config.build
index b748b33..afbdde0 100644
--- gcc-host-clean/gcc/config.build
+++ gcc-host-workdir/gcc/config.build
@@ -45,7 +45,7 @@
 build_xm_file=
 build_xm_defines=
 build_exeext=
-build_install_headers_dir=install-headers-tar
+build_install_headers_dir=install-headers-cp
 build_file_translate=
 
 # System-specific settings.
diff --git gcc-host-clean/gcc/config.gcc gcc-host-workdir/gcc/config.gcc
index 95c91ee..5cdc83a 100644
--- gcc-host-clean/gcc/config.gcc
+++ gcc-host-workdir/gcc/config.gcc
@@ -878,6 +878,15 @@ case ${target} in
   rust_target_objs="${rust_target_objs} freebsd-rust.o"
   target_has_targetrustm=yes
   ;;
+*-*-*-mlibc)
+  extra_options="$extra_options gnu-user.opt"
+  gas=yes
+  gnu_ld=yes
+  default_use_cxa_atexit=yes
+  use_gcc_stdint=wrap
+  tmake_file="${tmake_file} t-slibgcc"
+  thread_file='posix'
+  ;;
 *-*-fuchsia*)
   native_system_header_dir=/include
   tmake_file="t-fuchsia"
@@ -2284,6 +2293,9 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)
 			;;
 	esac
 	;;
+x86_64-*-ironclad*)
+	tm_file="${tm_file} i386/unix.h i386/att.h elfos.h gnu-user.h glibc-stdint.h i386/x86-64.h i386/gnu-user-common.h i386/gnu-user64.h i386/ironclad.h"
+	;;
 x86_64-*-fuchsia*)
 	tmake_file="${tmake_file} i386/t-x86_64-elf"
 	tm_file="${tm_file} i386/unix.h i386/att.h elfos.h newlib-stdint.h i386/i386elf.h i386/x86-64.h fuchsia.h"
@@ -2483,6 +2495,13 @@ microblaze*-*-elf)
 	cxx_target_objs="${cxx_target_objs} microblaze-c.o"
 	tmake_file="${tmake_file} microblaze/t-microblaze"
         ;;
+riscv*-*-ironclad*)
+	tm_file="${tm_file} elfos.h gnu-user.h glibc-stdint.h riscv/ironclad.h"
+	tmake_file="${tmake_file} riscv/t-riscv"
+	gnu_ld=yes
+	gas=yes
+	gcc_cv_initfini_array=yes
+	;;
 riscv*-*-linux*)
 	tm_file="elfos.h gnu-user.h linux.h glibc-stdint.h ${tm_file} riscv/linux.h"
 	case "x${enable_multilib}" in
diff --git gcc-host-clean/libatomic/configure.tgt gcc-host-workdir/libatomic/configure.tgt
index 4237f28..8327bfa 100644
--- gcc-host-clean/libatomic/configure.tgt
+++ gcc-host-workdir/libatomic/configure.tgt
@@ -151,7 +151,7 @@ case "${target}" in
   *-*-linux* | *-*-gnu* | *-*-k*bsd*-gnu \
   | *-*-netbsd* | *-*-freebsd* | *-*-openbsd* | *-*-dragonfly* \
   | *-*-solaris2* | *-*-sysv4* | *-*-irix6* | *-*-osf* | *-*-hpux11* \
-  | *-*-darwin* | *-*-aix* | *-*-cygwin*)
+  | *-*-darwin* | *-*-aix* | *-*-cygwin* | *-*-mlibc*)
 	# POSIX system.  The OS is supported.
 	config_path="${config_path} posix"
 	;;
diff --git gcc-host-clean/libcpp/Makefile.in gcc-host-workdir/libcpp/Makefile.in
index ebbca37..ea97ba4 100644
--- gcc-host-clean/libcpp/Makefile.in
+++ gcc-host-workdir/libcpp/Makefile.in
@@ -32,10 +32,10 @@ AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
 CATALOGS = $(patsubst %,po/%,@CATALOGS@)
 CC = @CC@
-CFLAGS = @CFLAGS@
+override CFLAGS := @CFLAGS@
 WARN_CFLAGS = @warn@ @c_warn@ @WARN_PEDANTIC@ @WERROR@
 CXX = @CXX@
-CXXFLAGS = @CXXFLAGS@
+override CXXFLAGS := @CXXFLAGS@
 WARN_CXXFLAGS = @warn@ @WARN_PEDANTIC@ @WERROR@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
@@ -45,7 +45,7 @@ INCINTL = @INCINTL@
 INSTALL_DATA = @INSTALL_DATA@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_SCRIPT = @INSTALL_SCRIPT@
-LDFLAGS = @LDFLAGS@
+override LDFLAGS := @LDFLAGS@
 LIBICONV = @LIBICONV@
 LIBINTL = @LIBINTL@
 PACKAGE = @PACKAGE@
diff --git gcc-host-clean/libgcc/config.host gcc-host-workdir/libgcc/config.host
index e75a7af..a839ad8 100644
--- gcc-host-clean/libgcc/config.host
+++ gcc-host-workdir/libgcc/config.host
@@ -304,6 +304,11 @@ case ${host} in
   tmake_file="$tmake_file t-crtstuff-pic t-libgcc-pic t-eh-dw2-dip t-slibgcc t-slibgcc-fuchsia"
   extra_parts="crtbegin.o crtend.o"
   ;;
+*-*-*-mlibc)
+  extra_parts="$extra_parts crtbegin.o crtbeginS.o crtend.o crtendS.o"
+  tmake_file="$tmake_file t-crtstuff-pic"
+  tmake_file="$tmake_file t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver t-libgcc-pic"
+  ;;
 *-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-gnu* | *-*-kopensolaris*-gnu | *-*-uclinuxfdpiceabi)
   tmake_file="$tmake_file t-crtstuff-pic t-libgcc-pic t-eh-dw2-dip t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver t-linux"
   extra_parts="crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o"
@@ -752,6 +757,10 @@ x86_64-*-elf* | x86_64-*-rtems*)
 x86_64-*-fuchsia*)
 	tmake_file="$tmake_file t-libgcc-pic"
 	;;
+x86_64-*-*-mlibc)
+	extra_parts="$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o"
+	tmake_file="$tmake_file i386/t-crtpc t-crtfm i386/t-crtstuff t-dfprules"
+	;;
 i[34567]86-*-dragonfly*)
 	tmake_file="${tmake_file} i386/t-dragonfly i386/t-crtstuff"
 	md_unwind_header=i386/dragonfly-unwind.h
@@ -1347,6 +1356,10 @@ pru-*-*)
 	tmake_file="${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp t-gnu-prefix pru/t-pru"
 	tm_file="$tm_file pru/pru-abi.h"
 	;;
+riscv*-*-mlibc*)
+    tmake_file="${tmake_file} riscv/t-crtstuff riscv/t-softfp${host_address} t-softfp riscv/t-elf riscv/t-elf${host_address} t-slibgcc-libgcc"
+    extra_parts="$extra_parts crtbegin.o crtend.o crti.o crtn.o crtendS.o crtbeginT.o"
+	;;
 riscv*-*-linux*)
 	tmake_file="${tmake_file} riscv/t-crtstuff riscv/t-softfp${host_address} t-softfp riscv/t-elf riscv/t-elf${host_address} t-slibgcc-libgcc"
 	extra_parts="$extra_parts crtbegin.o crtend.o crti.o crtn.o crtendS.o crtbeginT.o"
diff --git gcc-host-clean/libgcc/configure.ac gcc-host-workdir/libgcc/configure.ac
index 4e8c036..d298fe5 100644
--- gcc-host-clean/libgcc/configure.ac
+++ gcc-host-workdir/libgcc/configure.ac
@@ -46,7 +46,7 @@ else
   libgcc_topdir="${srcdir}/.."
 fi
 AC_SUBST(libgcc_topdir)
-AC_CONFIG_AUX_DIR($libgcc_topdir)
+AC_CONFIG_AUX_DIR([.])
 AC_CONFIG_HEADER(auto-target.h:config.in)
 
 AC_ARG_ENABLE(shared,
diff --git gcc-host-clean/libiberty/configure.ac gcc-host-workdir/libiberty/configure.ac
index 0888e63..10161a1 100644
--- gcc-host-clean/libiberty/configure.ac
+++ gcc-host-workdir/libiberty/configure.ac
@@ -37,7 +37,7 @@ else
   libiberty_topdir="${srcdir}/.."
 fi
 AC_SUBST(libiberty_topdir)
-AC_CONFIG_AUX_DIR($libiberty_topdir)
+AC_CONFIG_AUX_DIR([.])
 
 dnl Very limited version of automake's enable-maintainer-mode
 
diff --git gcc-host-clean/libstdc++-v3/crossconfig.m4 gcc-host-workdir/libstdc++-v3/crossconfig.m4
index b3269cb..f2d4d13 100644
--- gcc-host-clean/libstdc++-v3/crossconfig.m4
+++ gcc-host-workdir/libstdc++-v3/crossconfig.m4
@@ -136,6 +136,18 @@ case "${host}" in
     AC_CHECK_FUNCS(uselocale)
     ;;
 
+  *-mlibc*)
+    GLIBCXX_CHECK_COMPILER_FEATURES
+    GLIBCXX_CHECK_LINKER_FEATURES
+    GLIBCXX_CHECK_MATH_SUPPORT
+    GLIBCXX_CHECK_STDLIB_SUPPORT
+    AC_DEFINE(_GLIBCXX_USE_DEV_RANDOM)
+    AC_DEFINE(_GLIBCXX_USE_RANDOM_TR1)
+    GCC_CHECK_TLS
+    AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)
+    AC_CHECK_FUNCS(timespec_get)
+    ;;
+
   *-fuchsia*)
     SECTION_FLAGS='-ffunction-sections -fdata-sections'
     AC_SUBST(SECTION_FLAGS)
