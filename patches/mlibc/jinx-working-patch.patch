diff --git mlibc-clean/options/internal/generic/charset.cpp mlibc-workdir/options/internal/generic/charset.cpp
index c42b4f4..232c229 100644
--- mlibc-clean/options/internal/generic/charset.cpp
+++ mlibc-workdir/options/internal/generic/charset.cpp
@@ -13,36 +13,28 @@ bool charset::is_ascii_superset() {
 bool charset::is_alpha(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_alpha() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_digit(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c >= '0' && c <= '9';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_digit() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_xdigit(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_xdigit() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_alnum(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_alnum() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
@@ -55,63 +47,49 @@ bool charset::is_punct(codepoint c) {
 				|| c == '@'
 				|| c == '[' || c == '\\' || c == ']' || c == '^' || c == '_' || c == '`'
 				|| c == '{' || c == '|' || c == '}' || c == '~';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_punct() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_graph(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c >= 0x21 && c <= 0x7E;
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_graph() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_blank(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c == ' ' || c == '\t';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_blank() is not implemented"
-				" for the full Unicode charset " << c << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_space(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_space() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_print(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c >= 0x20 && c <= 0x7E;
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_print() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_lower(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= 'a' && c <= 'z');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_print() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_upper(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= 'A' && c <= 'Z');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_print() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
@@ -119,9 +97,7 @@ codepoint charset::to_lower(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		if(c >= 'A' && c <= 'Z')
 			return c - 'A' + 'a';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::to_lower() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return c;
 }
 
@@ -129,9 +105,7 @@ codepoint charset::to_upper(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		if(c >= 'a' && c <= 'z')
 			return c - 'a' + 'A';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::to_upper() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return c;
 }
 
diff --git mlibc-clean/options/internal/riscv64/setjmp.S mlibc-workdir/options/internal/riscv64/setjmp.S
index 7ce9cfb..222954f 100644
--- mlibc-clean/options/internal/riscv64/setjmp.S
+++ mlibc-workdir/options/internal/riscv64/setjmp.S
@@ -36,7 +36,34 @@ _setjmp:
 .global sigsetjmp
 .type sigsetjmp, "function"
 sigsetjmp:
-	unimp // TODO
+	sd ra, 0(a0)
+	sd s0, 8(a0)
+	sd s1, 16(a0)
+	sd s2, 24(a0)
+	sd s3, 32(a0)
+	sd s4, 40(a0)
+	sd s5, 48(a0)
+	sd s6, 56(a0)
+	sd s7, 64(a0)
+	sd s8, 72(a0)
+	sd s9, 80(a0)
+	sd s10, 88(a0)
+	sd s11, 96(a0)
+	sd sp, 104(a0)
+	fsd fs0, 112(a0)
+	fsd fs1, 120(a0)
+	fsd fs2, 128(a0)
+	fsd fs3, 136(a0)
+	fsd fs4, 144(a0)
+	fsd fs5, 152(a0)
+	fsd fs6, 160(a0)
+	fsd fs7, 168(a0)
+	fsd fs8, 176(a0)
+	fsd fs9, 184(a0)
+	fsd fs10, 192(a0)
+	fsd fs11, 200(a0)
+	li a0, 0
+	ret
 
 .global longjmp
 .type longjmp, "function"
diff --git mlibc-clean/options/posix/generic/posix_locale.cpp mlibc-workdir/options/posix/generic/posix_locale.cpp
index bd8710a..feb59ee 100644
--- mlibc-clean/options/posix/generic/posix_locale.cpp
+++ mlibc-workdir/options/posix/generic/posix_locale.cpp
@@ -25,7 +25,7 @@ void freelocale(locale_t) {
 
 locale_t uselocale(locale_t) {
 	if(!uselocale_seen) {
-		mlibc::infoLogger() << "mlibc: uselocale() is a no-op" << frg::endlog;
+		//mlibc::infoLogger() << "mlibc: uselocale() is a no-op" << frg::endlog;
 		uselocale_seen = true;
 	}
 	return nullptr;
diff --git mlibc-clean/sysdeps/ironclad/generic/generic.cpp mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
index efaecaa..6a06f4a 100644
--- mlibc-clean/sysdeps/ironclad/generic/generic.cpp
+++ mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
@@ -83,30 +83,38 @@ int sys_open(const char *path, int flags, mode_t mode, int *fd) {
 int sys_openat(int dirfd, const char *path, int flags, mode_t mode, int *fd) {
 	int ret, errno;
 
-	int path_len = strlen (path);
+	int path_len = strlen(path);
 	SYSCALL4(SYSCALL_OPEN, dirfd, path, path_len, flags);
 	if (ret != -1 && (flags & O_EXCL)) {
 		SYSCALL1(SYSCALL_CLOSE, ret);
 		return EEXIST;
 	}
 
-	if (ret == -1 && (flags & O_CREAT)) {
+	// We implement creating files in this sysdep.
+	if ((errno == ENOENT) && (flags & O_CREAT)) {
 		SYSCALL5(SYSCALL_MAKENODE, AT_FDCWD, path, path_len, mode, 0);
 		if (ret == -1) {
 			return errno;
 		}
 		SYSCALL4(SYSCALL_OPEN, AT_FDCWD, path, path_len, flags);
-	} else if (ret != -1 && (flags & O_TRUNC)) {
-		// If the file cannot be truncated, dont sweat it, some software
-		// depends on some things being truncate-able that ironclad does not
-		// allow. For example, some devices.
-		sys_ftruncate(ret, 0);
-	} else if (ret != -1 && (flags & O_DIRECTORY)) {
-		struct stat st;
-		sys_stat(fsfd_target::fd, ret, NULL, 0, &st);
-		if (!S_ISDIR (st.st_mode)) {
-			ret	= -1;
-			errno = ENOTDIR;
+	}
+
+	// Handle some post-opening triggers.
+	if (ret != -1) {
+		if (flags & O_TRUNC) {
+			// If the file cannot be truncated, dont sweat it, some software
+			// depends on some things being truncate-able that ironclad does
+			// not allow. For example, some devices.
+			sys_ftruncate(ret, 0);
+		}
+		if (flags & O_DIRECTORY) {
+			struct stat st;
+			sys_stat(fsfd_target::fd, ret, NULL, 0, &st);
+			if (!S_ISDIR (st.st_mode)) {
+				SYSCALL1(SYSCALL_CLOSE, ret);
+				ret	= -1;
+				errno = ENOTDIR;
+			}
 		}
 	}
 
@@ -283,17 +291,6 @@ int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offse
 	int errno;
 	SYSCALL6(SYSCALL_MMAP, hint, size, prot, flags, fd, offset);
 	*window = ret;
-
-	if ((errno == ENOMEM) && ((flags & MAP_ANON) == 0)) {
-		int ret = sys_anon_allocate(size, window);
-		if (ret) {
-			return ret;
-		}
-		ssize_t len;
-		ret = sys_pread(fd, *window, size, offset, &len);
-		return 0;
-	}
-
 	return errno;
 }
 
