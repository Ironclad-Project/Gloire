diff --git a/builtins/psize.c b/builtins/psize.c
index 30881fb..fec55ae 100644
--- a/builtins/psize.c
+++ b/builtins/psize.c
@@ -21,33 +21,14 @@
 /*  Write output in 128-byte chunks until we get a sigpipe or write gets an
     EPIPE.  Then report how many bytes we wrote.  We assume that this is the
     pipe size. */
-#include <config.h>
-
-#if defined (HAVE_UNISTD_H)
-#  ifdef _MINIX
-#    include <sys/types.h>
-#  endif
-#  include <unistd.h>
-#endif
-
-#include <stdio.h>
-#ifndef _MINIX
-#include "../bashtypes.h"
-#endif
 #include <signal.h>
-#include <errno.h>
-
-#include "../command.h"
-#include "../general.h"
-#include "../sig.h"
-
-#ifndef errno
-extern int errno;
-#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
 
 int nw;
 
-sighandler
+void
 sigpipe (sig)
      int sig;
 {
diff --git a/lib/termcap/termcap.c b/lib/termcap/termcap.c
index ba3dab2..2882f0c 100644
--- a/lib/termcap/termcap.c
+++ b/lib/termcap/termcap.c
@@ -627,7 +627,7 @@ scan_file (str, fd, bufp)
   bufp->ateof = 0;
   *bufp->ptr = '\0';
 
-  lseek (fd, 0L, 0);
+  lseek (fd, 0L, SEEK_SET);
 
   while (!bufp->ateof)
     {
diff --git a/mksyntax.c b/mksyntax.c
index 0385686..f09fdeb 100644
--- a/mksyntax.c
+++ b/mksyntax.c
@@ -20,30 +20,19 @@
    along with Bash.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#include "config.h"
-
 #include <stdio.h>
+#include <string.h>
 #include "bashansi.h"
 #include "chartypes.h"
 #include <errno.h>
 
-#ifdef HAVE_UNISTD_H
-#  include <unistd.h>
-#endif
+#include <unistd.h>
 
 #include "syntax.h"
 
 extern int optind;
 extern char *optarg;
 
-#ifndef errno
-extern int errno;
-#endif
-
-#ifndef HAVE_STRERROR
-extern char *strerror();
-#endif
-
 struct wordflag {
 	int	flag;
 	char	*fstr;
@@ -375,41 +364,3 @@ main(argc, argv)
     fclose (fp);
   exit (0);
 }
-
-
-#if !defined (HAVE_STRERROR)
-
-#include <bashtypes.h>
-#if defined (HAVE_SYS_PARAM_H)
-#  include <sys/param.h>
-#endif
-
-#if defined (HAVE_UNISTD_H)
-#  include <unistd.h>
-#endif
-
-/* Return a string corresponding to the error number E.  From
-   the ANSI C spec. */
-#if defined (strerror)
-#  undef strerror
-#endif
-
-char *
-strerror (e)
-     int e;
-{
-  static char emsg[40];
-#if defined (HAVE_SYS_ERRLIST)
-  extern int sys_nerr;
-  extern char *sys_errlist[];
-
-  if (e > 0 && e < sys_nerr)
-    return (sys_errlist[e]);
-  else
-#endif /* HAVE_SYS_ERRLIST */
-    {
-      sprintf (emsg, "Unknown system error %d", e);
-      return (&emsg[0]);
-    }
-}
-#endif /* HAVE_STRERROR */
diff --git a/shell.c b/shell.c
index ce8087f..b7475dd 100644
--- a/shell.c
+++ b/shell.c
@@ -1614,7 +1614,7 @@ open_shell_script (script_name)
 #endif
 
   /* Only do this with non-tty file descriptors we can seek on. */
-  if (fd_is_tty == 0 && (lseek (fd, 0L, 1) != -1))
+  if (fd_is_tty == 0 && (lseek (fd, 0L, SEEK_CUR) != -1))
     {
       /* Check to see if the `file' in `bash file' is a binary file
 	 according to the same tests done by execute_simple_command (),
@@ -1651,7 +1651,7 @@ open_shell_script (script_name)
 	  exit (EX_BINARY_FILE);
 	}
       /* Now rewind the file back to the beginning. */
-      lseek (fd, 0L, 0);
+      lseek (fd, 0L, SEEK_SET);
     }
 
   /* Open the script.  But try to move the file descriptor to a randomly
diff --git a/support/bashversion.c b/support/bashversion.c
index 4f86b13..64779de 100644
--- a/support/bashversion.c
+++ b/support/bashversion.c
@@ -18,15 +18,12 @@
    along with Bash.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#include "config.h"
-
 #include "stdc.h"
 
 #include <stdio.h>
+#include <string.h>
 
-#if defined (HAVE_UNISTD_H)
-#  include <unistd.h>
-#endif
+#include <unistd.h>
 
 #include "bashansi.h"
 
diff --git a/support/man2html.c b/support/man2html.c
index e6f441b..846bd54 100644
--- a/support/man2html.c
+++ b/support/man2html.c
@@ -62,9 +62,6 @@
  *    that all these features work on all manpages. (I didn't have the
  *    time to look through all the available manpages.)
  */
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
 
 #define NROFF 0
 
@@ -123,27 +120,6 @@ char *manpage;
 #define BD_LITERAL  1
 #define BD_INDENT   2
 
-#ifndef HAVE_STRERROR
-static char *
-strerror(int e)
-{
-	static char emsg[40];
-
-#if defined (HAVE_SYS_ERRLIST)
-	extern int sys_nerr;
-	extern char *sys_errlist[];
-
-	if (e > 0 && e < sys_nerr)
-		return (sys_errlist[e]);
-	else
-#endif				/* HAVE_SYS_ERRLIST */
-	{
-		sprintf(emsg, "Unknown system error %d", e);
-		return (&emsg[0]);
-	}
-}
-#endif				/* !HAVE_STRERROR */
-
 static char *
 strgrow(char *old, int len)
 {
diff --git a/support/mksignames.c b/support/mksignames.c
index ba87ae8..5bcbb16 100644
--- a/support/mksignames.c
+++ b/support/mksignames.c
@@ -19,17 +19,11 @@
    along with Bash.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#include <config.h>
-
 #include <sys/types.h>
 #include <signal.h>
 
 #include <stdio.h>
-#if defined (HAVE_STDLIB_H)
-#  include <stdlib.h>
-#else
-#  include "ansi_stdlib.h"
-#endif /* HAVE_STDLIB_H */
+#include <stdlib.h>
 
 /* Duplicated from signames.c */
 #if !defined (NSIG)
diff --git a/support/signames.c b/support/signames.c
index aba4842..e369a73 100644
--- a/support/signames.c
+++ b/support/signames.c
@@ -18,18 +18,12 @@
    along with Bash.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#include <config.h>
-
 #include <stdio.h>
 
 #include <sys/types.h>
 #include <signal.h>
 
-#if defined (HAVE_STDLIB_H)
-#  include <stdlib.h>
-#else
-#  include "ansi_stdlib.h"
-#endif /* HAVE_STDLIB_H */
+#include <stdlib.h>
 
 #if !defined (NSIG)
 #  define NSIG 64

diff --git bash-clean/arrayfunc.c bash-workdir/arrayfunc.c
index 2c05d15..3904c76 100644
--- bash-clean/arrayfunc.c
+++ bash-workdir/arrayfunc.c
@@ -208,7 +208,10 @@ bind_assoc_var_internal (entry, hash, key, value, flags)
   newval = make_array_variable_value (entry, 0, key, value, flags);
 
   if (entry->assign_func)
-    (*entry->assign_func) (entry, newval, 0, key);
+    {
+      (*entry->assign_func) (entry, newval, 0, key);
+      FREE (key);
+    }
   else
     assoc_insert (hash, key, newval);
 
diff --git bash-clean/bashline.c bash-workdir/bashline.c
index c85b05b..bd7548c 100644
--- bash-clean/bashline.c
+++ bash-workdir/bashline.c
@@ -1928,6 +1928,7 @@ bash_command_name_stat_hook (name)
   result = search_for_command (cname, 0);
   if (result)
     {
+      FREE (*name);
       *name = result;
       return 1;
     }
diff --git bash-clean/builtins/evalstring.c bash-workdir/builtins/evalstring.c
index df3dd68..20c6a4a 100644
--- bash-clean/builtins/evalstring.c
+++ bash-workdir/builtins/evalstring.c
@@ -461,6 +461,8 @@ parse_and_execute (string, from_file, flags)
 		      should_jump_to_top_level = 0;
 		      last_result = last_command_exit_value = EX_BADUSAGE;
 		      set_pipestatus_from_exit (last_command_exit_value);
+		      dispose_command(command);
+		      global_command = (COMMAND *)NULL;
 		      reset_parser ();
 		      break;
 		    }
@@ -762,6 +764,8 @@ open_redir_file (r, fnp)
 
   if (fnp)
     *fnp = fn;
+  else
+    free (fn);
   return fd;
 }
 
diff --git bash-clean/configure.ac bash-workdir/configure.ac
index 50a6e20..52d4029 100644
--- bash-clean/configure.ac
+++ bash-workdir/configure.ac
@@ -885,7 +885,7 @@ AC_CHECK_DECLS([strtold], [
 	[AC_COMPILE_IFELSE(
 		[AC_LANG_PROGRAM(
 		[[#include <stdlib.h>]],
-		[[long double r; char *foo, bar; r = strtold(foo, &bar);]]
+		[[long double r; char *foo, *bar; r = strtold(foo, &bar);]]
 	)],
 	[bash_cv_strtold_broken=no],[bash_cv_strtold_broken=yes])
         ]
diff --git bash-clean/examples/loadables/stat.c bash-workdir/examples/loadables/stat.c
index 1e60e7b..ed5c976 100644
--- bash-clean/examples/loadables/stat.c
+++ bash-workdir/examples/loadables/stat.c
@@ -349,6 +349,7 @@ loadstat (vname, var, fname, flags, fmt, sp)
       key = savestring (arraysubs[i]);
       value = statval (i, fname, flags, fmt, sp);
       v = bind_assoc_variable (var, vname, key, value, ASS_FORCE);
+      free (value);
     }
   return 0;
 }
diff --git bash-clean/lib/sh/random.c bash-workdir/lib/sh/random.c
index 1eaa71a..27aa87b 100644
--- bash-clean/lib/sh/random.c
+++ bash-workdir/lib/sh/random.c
@@ -76,7 +76,7 @@ intrand32 (last)
   /* Can't seed with 0. */
   ret = (last == 0) ? 123459876 : last;
   h = ret / 127773;
-  l = ret - (127773 * h);
+  l = ret % 127773;
   t = 16807 * l - 2836 * h;
   ret = (t < 0) ? t + 0x7fffffff : t;
 
@@ -90,7 +90,7 @@ genseed ()
   u_bits32_t iv;
 
   gettimeofday (&tv, NULL);
-  iv = (u_bits32_t)seedrand;		/* let the compiler truncate */
+  iv = (uintptr_t)seedrand;		/* let the compiler truncate */
   iv = tv.tv_sec ^ tv.tv_usec ^ getpid () ^ getppid () ^ current_user.uid ^ iv;
   return (iv);
 }
diff --git bash-clean/subst.c bash-workdir/subst.c
index 0dfabfe..d16035e 100644
--- bash-clean/subst.c
+++ bash-workdir/subst.c
@@ -10727,6 +10727,7 @@ comsub:
 	    {
 	      chk_atstar (temp, quoted, pflags, quoted_dollar_at_p, contains_dollar_at);
 	      tdesc = parameter_brace_expand_word (temp, SPECIAL_VAR (temp, 0), quoted, pflags, 0);
+	      free (temp1);
 	      if (tdesc == &expand_wdesc_error || tdesc == &expand_wdesc_fatal)
 		return (tdesc);
 	      ret = tdesc;
@@ -10739,6 +10740,7 @@ comsub:
 	    {
 	      set_exit_status (EXECUTION_FAILURE);
 	      report_error (_("%s: invalid variable name for name reference"), temp);
+	      free (temp1);
 	      return (&expand_wdesc_error);	/* XXX */
 	    }
 	  else
