diff --git mesa-clean/include/drm-uapi/drm.h mesa-workdir/include/drm-uapi/drm.h
index 5e54c3a..06c2024 100644
--- mesa-clean/include/drm-uapi/drm.h
+++ mesa-workdir/include/drm-uapi/drm.h
@@ -37,10 +37,24 @@
 
 #if   defined(__linux__)
 
+#include <sys/ioctl.h>
 #include <linux/types.h>
-#include <asm/ioctl.h>
+//#include <asm/ioctl.h>
 typedef unsigned int drm_handle_t;
 
+#elif defined(__ironclad__)
+#include <sys/ioctl.h>
+typedef int8_t   __s8;
+typedef uint8_t  __u8;
+typedef int16_t  __s16;
+typedef uint16_t __u16;
+typedef int32_t  __s32;
+typedef uint32_t __u32;
+typedef int64_t  __s64;
+typedef uint64_t __u64;
+typedef size_t   __kernel_size_t;
+typedef unsigned long drm_handle_t;
+
 #else /* One of the BSDs */
 
 #include <stdint.h>
diff --git mesa-clean/meson.build mesa-workdir/meson.build
index 07c77e1..5dd5be7 100644
--- mesa-clean/meson.build
+++ mesa-workdir/meson.build
@@ -27,7 +27,7 @@ project(
   ).stdout(),
   license : 'MIT',
   meson_version : '>= 0.52',
-  default_options : ['buildtype=debugoptimized', 'b_ndebug=if-release', 'c_std=c11', 'cpp_std=c++14']
+  default_options : ['buildtype=debugoptimized', 'b_ndebug=if-release', 'c_std=gnu11', 'cpp_std=c++14']
 )
 
 cc = meson.get_compiler('c')
@@ -176,7 +176,7 @@ with_any_opengl = with_opengl or with_gles1 or with_gles2
 # Only build shared_glapi if at least one OpenGL API is enabled
 with_shared_glapi = with_shared_glapi and with_any_opengl
 
-system_has_kms_drm = ['openbsd', 'netbsd', 'freebsd', 'gnu/kfreebsd', 'dragonfly', 'linux', 'sunos'].contains(host_machine.system())
+system_has_kms_drm = ['openbsd', 'netbsd', 'freebsd', 'gnu/kfreebsd', 'dragonfly', 'linux', 'ironclad', 'sunos'].contains(host_machine.system())
 
 dri_drivers = get_option('dri-drivers')
 if dri_drivers.contains('auto')
diff --git mesa-clean/src/compiler/spirv/spirv_to_nir.c mesa-workdir/src/compiler/spirv/spirv_to_nir.c
index 71cdc83..3d26705 100644
--- mesa-clean/src/compiler/spirv/spirv_to_nir.c
+++ mesa-workdir/src/compiler/spirv/spirv_to_nir.c
@@ -37,6 +37,7 @@
 #include "util/u_string.h"
 
 #include <stdio.h>
+#include <strings.h>
 
 #ifndef NDEBUG
 static enum nir_spirv_debug_level
diff --git mesa-clean/src/egl/main/egllog.c mesa-workdir/src/egl/main/egllog.c
index 984dd5b..6a91952 100644
--- mesa-clean/src/egl/main/egllog.c
+++ mesa-workdir/src/egl/main/egllog.c
@@ -39,6 +39,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <strings.h>
 #include "c11/threads.h"
 #include "util/macros.h"
 #include "util/u_string.h"
diff --git mesa-clean/src/gallium/drivers/llvmpipe/lp_texture.c mesa-workdir/src/gallium/drivers/llvmpipe/lp_texture.c
index 5bfc8db..d2b31e1 100644
--- mesa-clean/src/gallium/drivers/llvmpipe/lp_texture.c
+++ mesa-workdir/src/gallium/drivers/llvmpipe/lp_texture.c
@@ -1102,7 +1102,6 @@ llvmpipe_resource_get_param(struct pipe_screen *screen,
    default:
       break;
    }
-   assert(0);
    *value = 0;
    return false;
 }
diff --git mesa-clean/src/util/debug.c mesa-workdir/src/util/debug.c
index 89ae613..fbf45f4 100644
--- mesa-clean/src/util/debug.c
+++ mesa-workdir/src/util/debug.c
@@ -23,6 +23,7 @@
 
 #include <errno.h>
 #include <string.h>
+#include <strings.h>
 #include "debug.h"
 #include "u_string.h"
 
diff --git mesa-clean/src/util/detect_os.h mesa-workdir/src/util/detect_os.h
index 6506948..f83124e 100644
--- mesa-clean/src/util/detect_os.h
+++ mesa-workdir/src/util/detect_os.h
@@ -81,6 +81,11 @@
 #define DETECT_OS_UNIX 1
 #endif
 
+#if defined(__ironclad__)
+#define DETECT_OS_IRONCLAD 1
+#define DETECT_OS_UNIX 1
+#endif
+
 
 /*
  * Make sure DETECT_OS_* are always defined, so that they can be used with #if
@@ -127,5 +132,8 @@
 #ifndef DETECT_OS_WINDOWS
 #define DETECT_OS_WINDOWS 0
 #endif
+#ifndef DETECT_OS_IRONCLAD
+#define DETECT_OS_IRONCLAD 0
+#endif
 
 #endif /* DETECT_OS_H */
diff --git mesa-clean/src/util/futex.h mesa-workdir/src/util/futex.h
index 43097f4..54d0485 100644
--- mesa-clean/src/util/futex.h
+++ mesa-workdir/src/util/futex.h
@@ -24,97 +24,6 @@
 #ifndef UTIL_FUTEX_H
 #define UTIL_FUTEX_H
 
-#if defined(HAVE_LINUX_FUTEX_H)
-#define UTIL_FUTEX_SUPPORTED 1
-
-#include <limits.h>
-#include <stdint.h>
-#include <unistd.h>
-#include <linux/futex.h>
-#include <sys/syscall.h>
-#include <sys/time.h>
-
-static inline long sys_futex(void *addr1, int op, int val1, const struct timespec *timeout, void *addr2, int val3)
-{
-   return syscall(SYS_futex, addr1, op, val1, timeout, addr2, val3);
-}
-
-static inline int futex_wake(uint32_t *addr, int count)
-{
-   return sys_futex(addr, FUTEX_WAKE, count, NULL, NULL, 0);
-}
-
-static inline int futex_wait(uint32_t *addr, int32_t value, const struct timespec *timeout)
-{
-   /* FUTEX_WAIT_BITSET with FUTEX_BITSET_MATCH_ANY is equivalent to
-    * FUTEX_WAIT, except that it treats the timeout as absolute. */
-   return sys_futex(addr, FUTEX_WAIT_BITSET, value, timeout, NULL,
-                    FUTEX_BITSET_MATCH_ANY);
-}
-
-#elif defined(__FreeBSD__)
-#define UTIL_FUTEX_SUPPORTED 1
-
-#include <assert.h>
-#include <errno.h>
-#include <fcntl.h>
-#include <sys/types.h>
-#include <sys/umtx.h>
-#include <sys/time.h>
-
-static inline int futex_wake(uint32_t *addr, int count)
-{
-   assert(count == (int)(uint32_t)count); /* Check that bits weren't discarded */
-   return _umtx_op(addr, UMTX_OP_WAKE, (uint32_t)count, NULL, NULL) == -1 ? errno : 0;
-}
-
-static inline int futex_wait(uint32_t *addr, int32_t value, struct timespec *timeout)
-{
-   void *uaddr = NULL, *uaddr2 = NULL;
-   struct _umtx_time tmo = {
-      ._flags = UMTX_ABSTIME,
-      ._clockid = CLOCK_MONOTONIC
-   };
-
-   assert(value == (int)(uint32_t)value); /* Check that bits weren't discarded */
-
-   if (timeout != NULL) {
-      tmo._timeout = *timeout;
-      uaddr = (void *)(uintptr_t)sizeof(tmo);
-      uaddr2 = (void *)&tmo;
-   }
-
-   return _umtx_op(addr, UMTX_OP_WAIT_UINT, (uint32_t)value, uaddr, uaddr2) == -1 ? errno : 0;
-}
-
-#elif defined(__OpenBSD__)
-#define UTIL_FUTEX_SUPPORTED 1
-
-#include <sys/time.h>
-#include <sys/futex.h>
-
-static inline int futex_wake(uint32_t *addr, int count)
-{
-   return futex(addr, FUTEX_WAKE, count, NULL, NULL);
-}
-
-static inline int futex_wait(uint32_t *addr, int32_t value, const struct timespec *timeout)
-{
-   struct timespec tsnow, tsrel;
-
-   if (timeout == NULL)
-      return futex(addr, FUTEX_WAIT, value, NULL, NULL);
-
-   clock_gettime(CLOCK_MONOTONIC, &tsnow);
-   if (timespeccmp(&tsnow, timeout, <))
-      timespecsub(timeout, &tsnow, &tsrel);
-   else
-      timespecclear(&tsrel);
-   return futex(addr, FUTEX_WAIT, value, &tsrel, NULL);
-}
-
-#else
 #define UTIL_FUTEX_SUPPORTED 0
-#endif
 
 #endif /* UTIL_FUTEX_H */
diff --git mesa-clean/src/util/os_misc.c mesa-workdir/src/util/os_misc.c
index 31f1c55..3748bcb 100644
--- mesa-clean/src/util/os_misc.c
+++ mesa-workdir/src/util/os_misc.c
@@ -57,7 +57,7 @@
 #  include <unistd.h>
 #  include <log/log.h>
 #  include <cutils/properties.h>
-#elif DETECT_OS_LINUX || DETECT_OS_CYGWIN || DETECT_OS_SOLARIS || DETECT_OS_HURD
+#elif DETECT_OS_LINUX || DETECT_OS_CYGWIN || DETECT_OS_SOLARIS || DETECT_OS_HURD || DETECT_OS_IRONCLAD
 #  include <unistd.h>
 #elif DETECT_OS_OPENBSD || DETECT_OS_FREEBSD
 #  include <sys/resource.h>
@@ -223,7 +223,7 @@ os_get_option(const char *name)
 bool
 os_get_total_physical_memory(uint64_t *size)
 {
-#if DETECT_OS_LINUX || DETECT_OS_CYGWIN || DETECT_OS_SOLARIS || DETECT_OS_HURD
+#if DETECT_OS_LINUX || DETECT_OS_CYGWIN || DETECT_OS_SOLARIS || DETECT_OS_HURD || DETECT_OS_IRONCLAD
    const long phys_pages = sysconf(_SC_PHYS_PAGES);
    const long page_size = sysconf(_SC_PAGE_SIZE);
 
diff --git mesa-clean/src/util/os_time.c mesa-workdir/src/util/os_time.c
index d2edd88..9a3ca8f 100644
--- mesa-clean/src/util/os_time.c
+++ mesa-workdir/src/util/os_time.c
@@ -53,7 +53,7 @@
 int64_t
 os_time_get_nano(void)
 {
-#if DETECT_OS_LINUX || DETECT_OS_BSD
+#if DETECT_OS_LINUX || DETECT_OS_BSD || DETECT_OS_IRONCLAD
 
    struct timespec tv;
    clock_gettime(CLOCK_MONOTONIC, &tv);
@@ -92,7 +92,7 @@ os_time_get_nano(void)
 void
 os_time_sleep(int64_t usecs)
 {
-#if DETECT_OS_LINUX
+#if DETECT_OS_LINUX || DETECT_OS_IRONCLAD
    struct timespec time;
    time.tv_sec = usecs / 1000000;
    time.tv_nsec = (usecs % 1000000) * 1000;
diff --git mesa-clean/src/util/u_printf.h mesa-workdir/src/util/u_printf.h
index 44dcce5..e9e23ba 100644
--- mesa-clean/src/util/u_printf.h
+++ mesa-workdir/src/util/u_printf.h
@@ -22,6 +22,8 @@
 #ifndef U_PRINTF_H
 #define U_PRINTF_H
 
+#include <stdarg.h>
+
 #ifdef __cplusplus
 
 #include <string>
diff --git mesa-clean/src/util/u_thread.h mesa-workdir/src/util/u_thread.h
index 013e8be..0ffbae1 100644
--- mesa-clean/src/util/u_thread.h
+++ mesa-workdir/src/util/u_thread.h
@@ -129,7 +129,7 @@ static inline thrd_t u_thread_create(int (*routine)(void *), void *param)
 static inline void u_thread_setname( const char *name )
 {
 #if defined(HAVE_PTHREAD)
-#if DETECT_OS_LINUX || DETECT_OS_CYGWIN || DETECT_OS_SOLARIS
+#if DETECT_OS_LINUX || DETECT_OS_CYGWIN || DETECT_OS_SOLARIS || DETECT_OS_IRONCLAD
    int ret = pthread_setname_np(pthread_self(), name);
    if (ret == ERANGE) {
       char buf[16];
@@ -242,7 +242,7 @@ util_set_current_thread_affinity(const uint32_t *mask,
 static inline int64_t
 util_thread_get_time_nano(thrd_t thread)
 {
-#if defined(HAVE_PTHREAD) && !defined(__APPLE__) && !defined(__HAIKU__)
+#if defined(HAVE_PTHREAD) && !defined(__APPLE__) && !defined(__HAIKU__) && !defined(__ironclad__)
    struct timespec ts;
    clockid_t cid;
 
