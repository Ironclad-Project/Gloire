diff -urN --no-dereference bash-clean/arrayfunc.c bash-workdir/arrayfunc.c
--- bash-clean/arrayfunc.c
+++ bash-workdir/arrayfunc.c
@@ -208,7 +208,10 @@
   newval = make_array_variable_value (entry, 0, key, value, flags);
 
   if (entry->assign_func)
-    (*entry->assign_func) (entry, newval, 0, key);
+    {
+      (*entry->assign_func) (entry, newval, 0, key);
+      FREE (key);
+    }
   else
     assoc_insert (hash, key, newval);
 
@@ -985,6 +988,7 @@
   if (t != w+ind)
    free (t);
   strcpy (nword + i, value);
+  free (value);
 
   return nword;
 }
diff -urN --no-dereference bash-clean/bashline.c bash-workdir/bashline.c
--- bash-clean/bashline.c
+++ bash-workdir/bashline.c
@@ -1928,6 +1928,7 @@
   result = search_for_command (cname, 0);
   if (result)
     {
+      FREE (*name);
       *name = result;
       return 1;
     }
diff -urN --no-dereference bash-clean/builtins/evalstring.c bash-workdir/builtins/evalstring.c
--- bash-clean/builtins/evalstring.c
+++ bash-workdir/builtins/evalstring.c
@@ -461,6 +461,8 @@
 		      should_jump_to_top_level = 0;
 		      last_result = last_command_exit_value = EX_BADUSAGE;
 		      set_pipestatus_from_exit (last_command_exit_value);
+		      dispose_command(command);
+		      global_command = (COMMAND *)NULL;
 		      reset_parser ();
 		      break;
 		    }
diff -urN --no-dereference bash-clean/builtins/psize.c bash-workdir/builtins/psize.c
--- bash-clean/builtins/psize.c
+++ bash-workdir/builtins/psize.c
@@ -21,33 +21,14 @@
 /*  Write output in 128-byte chunks until we get a sigpipe or write gets an
     EPIPE.  Then report how many bytes we wrote.  We assume that this is the
     pipe size. */
-#include <config.h>
-
-#if defined (HAVE_UNISTD_H)
-#  ifdef _MINIX
-#    include <sys/types.h>
-#  endif
-#  include <unistd.h>
-#endif
-
-#include <stdio.h>
-#ifndef _MINIX
-#include "../bashtypes.h"
-#endif
 #include <signal.h>
-#include <errno.h>
-
-#include "../command.h"
-#include "../general.h"
-#include "../sig.h"
-
-#ifndef errno
-extern int errno;
-#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
 
 int nw;
 
-sighandler
+void
 sigpipe (sig)
      int sig;
 {
diff -urN --no-dereference bash-clean/builtins/read.def bash-workdir/builtins/read.def
--- bash-clean/builtins/read.def
+++ bash-workdir/builtins/read.def
@@ -130,7 +130,7 @@
 #endif
 static SHELL_VAR *bind_read_variable PARAMS((char *, char *, int));
 #if defined (HANDLE_MULTIBYTE)
-static int read_mbchar PARAMS((int, char *, int, int, int));
+static int read_mbchar PARAMS((int, char *, int, int, int, int));
 #endif
 static void ttyrestore PARAMS((struct ttsave *));
 
@@ -806,7 +806,7 @@
 	  else
 #  endif
 	  if (locale_utf8locale == 0 || ((c & 0x80) != 0))
-	    i += read_mbchar (fd, input_string, i, c, unbuffered_read);
+	    i += read_mbchar (fd, input_string, i, c, delim, unbuffered_read);
 	}
 #endif
 
@@ -1064,10 +1064,10 @@
 
 #if defined (HANDLE_MULTIBYTE)
 static int
-read_mbchar (fd, string, ind, ch, unbuffered)
+read_mbchar (fd, string, ind, ch, delim, unbuffered)
      int fd;
      char *string;
-     int ind, ch, unbuffered;
+     int ind, ch, delim, unbuffered;
 {
   char mbchar[MB_LEN_MAX + 1];
   int i, n, r;
@@ -1101,8 +1101,21 @@
 	  mbchar[i++] = c;	
 	  continue;
 	}
-      else if (ret == (size_t)-1 || ret == (size_t)0 || ret > (size_t)0)
-	break;
+      else if (ret == (size_t)-1)
+	{
+	  /* If we read a delimiter character that makes this an invalid
+	     multibyte character, we can't just add it to the input string
+	     and treat it as a byte. We need to push it back so a subsequent
+	     zread will pick it up. */
+	  if (c == delim)
+	    {
+	      zungetc (c);
+	      mbchar[--i] = '\0';		/* unget the delimiter */
+	    }
+	  break;		/* invalid multibyte character */
+	}
+      else if (ret == (size_t)0 || ret > (size_t)0)
+	break;		/* valid multibyte character */
     }
 
 mbchar_return:
diff -urN --no-dereference bash-clean/examples/loadables/stat.c bash-workdir/examples/loadables/stat.c
--- bash-clean/examples/loadables/stat.c
+++ bash-workdir/examples/loadables/stat.c
@@ -349,6 +349,7 @@
       key = savestring (arraysubs[i]);
       value = statval (i, fname, flags, fmt, sp);
       v = bind_assoc_variable (var, vname, key, value, ASS_FORCE);
+      free (value);
     }
   return 0;
 }
diff -urN --no-dereference bash-clean/externs.h bash-workdir/externs.h
--- bash-clean/externs.h
+++ bash-workdir/externs.h
@@ -536,6 +536,7 @@
 extern ssize_t zreadc PARAMS((int, char *));
 extern ssize_t zreadcintr PARAMS((int, char *));
 extern ssize_t zreadn PARAMS((int, char *, size_t));
+extern int zungetc PARAMS((int));
 extern void zreset PARAMS((void));
 extern void zsyncfd PARAMS((int));
 
diff -urN --no-dereference bash-clean/lib/sh/random.c bash-workdir/lib/sh/random.c
--- bash-clean/lib/sh/random.c
+++ bash-workdir/lib/sh/random.c
@@ -76,7 +76,7 @@
   /* Can't seed with 0. */
   ret = (last == 0) ? 123459876 : last;
   h = ret / 127773;
-  l = ret - (127773 * h);
+  l = ret % 127773;
   t = 16807 * l - 2836 * h;
   ret = (t < 0) ? t + 0x7fffffff : t;
 
@@ -90,7 +90,7 @@
   u_bits32_t iv;
 
   gettimeofday (&tv, NULL);
-  iv = (u_bits32_t)seedrand;		/* let the compiler truncate */
+  iv = (uintptr_t)seedrand;		/* let the compiler truncate */
   iv = tv.tv_sec ^ tv.tv_usec ^ getpid () ^ getppid () ^ current_user.uid ^ iv;
   return (iv);
 }
diff -urN --no-dereference bash-clean/lib/sh/zread.c bash-workdir/lib/sh/zread.c
--- bash-clean/lib/sh/zread.c
+++ bash-workdir/lib/sh/zread.c
@@ -41,6 +41,10 @@
 #  define ZBUFSIZ 4096
 #endif
 
+#ifndef EOF
+#  define EOF -1
+#endif
+
 extern int executing_builtin;
 
 extern void check_signals_and_traps (void);
@@ -48,6 +52,11 @@
 extern int signal_is_trapped (int);
 extern int read_builtin_timeout (int);
 
+int zungetc (int);
+
+/* Provide one character of pushback whether we are using read or zread. */
+static int zpushedchar = -1;
+
 /* Read LEN bytes from FD into BUF.  Retry the read on EINTR.  Any other
    error causes the loop to break. */
 ssize_t
@@ -59,6 +68,15 @@
   ssize_t r;
 
   check_signals ();	/* check for signals before a blocking read */
+
+  /* If we pushed a char back, return it immediately */
+  if (zpushedchar != -1)
+    {
+      *buf = (unsigned char)zpushedchar;
+      zpushedchar = -1;
+      return 1;
+    }
+
   /* should generalize into a mechanism where different parts of the shell can
      `register' timeouts and have them checked here. */
   while (((r = read_builtin_timeout (fd)) < 0 || (r = read (fd, buf, len)) < 0) &&
@@ -95,6 +113,14 @@
   ssize_t r;
   int nintr;
 
+  /* If we pushed a char back, return it immediately */
+  if (zpushedchar != -1)
+    {
+      *buf = (unsigned char)zpushedchar;
+      zpushedchar = -1;
+      return 1;
+    }
+
   for (nintr = 0; ; )
     {
       r = read (fd, buf, len);
@@ -118,6 +144,15 @@
      size_t len;
 {
   check_signals ();
+
+  /* If we pushed a char back, return it immediately */
+  if (zpushedchar != -1)
+    {
+      *buf = (unsigned char)zpushedchar;
+      zpushedchar = -1;
+      return 1;
+    }
+
   return (read (fd, buf, len));
 }
 
@@ -135,6 +170,14 @@
 {
   ssize_t nr;
 
+  /* If we pushed a char back, return it immediately */
+  if (zpushedchar != -1 && cp)
+    {
+      *cp = (unsigned char)zpushedchar;
+      zpushedchar = -1;
+      return 1;
+    }
+
   if (lind == lused || lused == 0)
     {
       nr = zread (fd, lbuf, sizeof (lbuf));
@@ -160,6 +203,14 @@
 {
   ssize_t nr;
 
+  /* If we pushed a char back, return it immediately */
+  if (zpushedchar != -1 && cp)
+    {
+      *cp = (unsigned char)zpushedchar;
+      zpushedchar = -1;
+      return 1;
+    }
+
   if (lind == lused || lused == 0)
     {
       nr = zreadintr (fd, lbuf, sizeof (lbuf));
@@ -186,6 +237,13 @@
 {
   ssize_t nr;
 
+  if (zpushedchar != -1 && cp)
+    {
+      *cp = zpushedchar;
+      zpushedchar = -1;
+      return 1;
+    }
+
   if (lind == lused || lused == 0)
     {
       if (len > sizeof (lbuf))
@@ -204,6 +262,22 @@
   return 1;
 }
 
+int
+zungetc (c)
+     int c;
+{
+  if (zpushedchar == -1)
+    {
+      zpushedchar = c;
+      return c;
+    }
+
+  if (c == EOF || lind == 0)
+    return (EOF);
+  lbuf[--lind] = c;		/* XXX */
+  return c;
+}
+
 void
 zreset ()
 {
diff -urN --no-dereference bash-clean/lib/termcap/termcap.c bash-workdir/lib/termcap/termcap.c
--- bash-clean/lib/termcap/termcap.c
+++ bash-workdir/lib/termcap/termcap.c
@@ -630,7 +630,7 @@
   bufp->ateof = 0;
   *bufp->ptr = '\0';
 
-  lseek (fd, 0L, 0);
+  lseek (fd, 0L, SEEK_SET);
 
   while (!bufp->ateof)
     {
diff -urN --no-dereference bash-clean/mksyntax.c bash-workdir/mksyntax.c
--- bash-clean/mksyntax.c
+++ bash-workdir/mksyntax.c
@@ -20,30 +20,19 @@
    along with Bash.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#include "config.h"
-
 #include <stdio.h>
+#include <string.h>
 #include "bashansi.h"
 #include "chartypes.h"
 #include <errno.h>
 
-#ifdef HAVE_UNISTD_H
-#  include <unistd.h>
-#endif
+#include <unistd.h>
 
 #include "syntax.h"
 
 extern int optind;
 extern char *optarg;
 
-#ifndef errno
-extern int errno;
-#endif
-
-#ifndef HAVE_STRERROR
-extern char *strerror();
-#endif
-
 struct wordflag {
 	int	flag;
 	char	*fstr;
@@ -375,41 +364,3 @@
     fclose (fp);
   exit (0);
 }
-
-
-#if !defined (HAVE_STRERROR)
-
-#include <bashtypes.h>
-#if defined (HAVE_SYS_PARAM_H)
-#  include <sys/param.h>
-#endif
-
-#if defined (HAVE_UNISTD_H)
-#  include <unistd.h>
-#endif
-
-/* Return a string corresponding to the error number E.  From
-   the ANSI C spec. */
-#if defined (strerror)
-#  undef strerror
-#endif
-
-char *
-strerror (e)
-     int e;
-{
-  static char emsg[40];
-#if defined (HAVE_SYS_ERRLIST)
-  extern int sys_nerr;
-  extern char *sys_errlist[];
-
-  if (e > 0 && e < sys_nerr)
-    return (sys_errlist[e]);
-  else
-#endif /* HAVE_SYS_ERRLIST */
-    {
-      sprintf (emsg, "Unknown system error %d", e);
-      return (&emsg[0]);
-    }
-}
-#endif /* HAVE_STRERROR */
diff -urN --no-dereference bash-clean/shell.c bash-workdir/shell.c
--- bash-clean/shell.c
+++ bash-workdir/shell.c
@@ -1647,7 +1647,7 @@
 #endif
 
   /* Only do this with non-tty file descriptors we can seek on. */
-  if (fd_is_tty == 0 && (lseek (fd, 0L, 1) != -1))
+  if (fd_is_tty == 0 && (lseek (fd, 0L, SEEK_CUR) != -1))
     {
       /* Check to see if the `file' in `bash file' is a binary file
 	 according to the same tests done by execute_simple_command (),
@@ -1684,7 +1684,7 @@
 	  exit (EX_BINARY_FILE);
 	}
       /* Now rewind the file back to the beginning. */
-      lseek (fd, 0L, 0);
+      lseek (fd, 0L, SEEK_SET);
     }
 
   /* Open the script.  But try to move the file descriptor to a randomly
diff -urN --no-dereference bash-clean/subst.c bash-workdir/subst.c
--- bash-clean/subst.c
+++ bash-workdir/subst.c
@@ -10727,6 +10727,7 @@
 	    {
 	      chk_atstar (temp, quoted, pflags, quoted_dollar_at_p, contains_dollar_at);
 	      tdesc = parameter_brace_expand_word (temp, SPECIAL_VAR (temp, 0), quoted, pflags, 0);
+	      free (temp1);
 	      if (tdesc == &expand_wdesc_error || tdesc == &expand_wdesc_fatal)
 		return (tdesc);
 	      ret = tdesc;
@@ -10739,6 +10740,7 @@
 	    {
 	      set_exit_status (EXECUTION_FAILURE);
 	      report_error (_("%s: invalid variable name for name reference"), temp);
+	      free (temp1);
 	      return (&expand_wdesc_error);	/* XXX */
 	    }
 	  else
diff -urN --no-dereference bash-clean/support/bashversion.c bash-workdir/support/bashversion.c
--- bash-clean/support/bashversion.c
+++ bash-workdir/support/bashversion.c
@@ -18,15 +18,12 @@
    along with Bash.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#include "config.h"
-
 #include "stdc.h"
 
 #include <stdio.h>
+#include <string.h>
 
-#if defined (HAVE_UNISTD_H)
-#  include <unistd.h>
-#endif
+#include <unistd.h>
 
 #include "bashansi.h"
 
diff -urN --no-dereference bash-clean/support/man2html.c bash-workdir/support/man2html.c
--- bash-clean/support/man2html.c
+++ bash-workdir/support/man2html.c
@@ -62,9 +62,6 @@
  *    that all these features work on all manpages. (I didn't have the
  *    time to look through all the available manpages.)
  */
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
 
 #define NROFF 0
 
@@ -123,27 +120,6 @@
 #define BD_LITERAL  1
 #define BD_INDENT   2
 
-#ifndef HAVE_STRERROR
-static char *
-strerror(int e)
-{
-	static char emsg[40];
-
-#if defined (HAVE_SYS_ERRLIST)
-	extern int sys_nerr;
-	extern char *sys_errlist[];
-
-	if (e > 0 && e < sys_nerr)
-		return (sys_errlist[e]);
-	else
-#endif				/* HAVE_SYS_ERRLIST */
-	{
-		sprintf(emsg, "Unknown system error %d", e);
-		return (&emsg[0]);
-	}
-}
-#endif				/* !HAVE_STRERROR */
-
 static char *
 strgrow(char *old, int len)
 {
diff -urN --no-dereference bash-clean/support/mksignames.c bash-workdir/support/mksignames.c
--- bash-clean/support/mksignames.c
+++ bash-workdir/support/mksignames.c
@@ -19,17 +19,11 @@
    along with Bash.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#include <config.h>
-
 #include <sys/types.h>
 #include <signal.h>
 
 #include <stdio.h>
-#if defined (HAVE_STDLIB_H)
-#  include <stdlib.h>
-#else
-#  include "ansi_stdlib.h"
-#endif /* HAVE_STDLIB_H */
+#include <stdlib.h>
 
 /* Duplicated from signames.c */
 #if !defined (NSIG)
diff -urN --no-dereference bash-clean/support/signames.c bash-workdir/support/signames.c
--- bash-clean/support/signames.c
+++ bash-workdir/support/signames.c
@@ -18,18 +18,12 @@
    along with Bash.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#include <config.h>
-
 #include <stdio.h>
 
 #include <sys/types.h>
 #include <signal.h>
 
-#if defined (HAVE_STDLIB_H)
-#  include <stdlib.h>
-#else
-#  include "ansi_stdlib.h"
-#endif /* HAVE_STDLIB_H */
+#include <stdlib.h>
 
 #if !defined (NSIG)
 #  define NSIG 64
