diff --git mlibc-clean/abis/ironclad/signal.h mlibc-workdir/abis/ironclad/signal.h
index f6eeed0..db23cd4 100644
--- mlibc-clean/abis/ironclad/signal.h
+++ mlibc-workdir/abis/ironclad/signal.h
@@ -48,18 +48,21 @@ typedef void (*__sighandler) (int);
 #define SIGTTOU   18
 #define SIGUSR1   19
 #define SIGUSR2   20
-#define SIGIO     21
-#define SIGPOLL   SIGIO
+#define SIGPOLL   21
 #define SIGPROF   22
 #define SIGSYS    23
-#define SIGCANCEL SIGSYS
 #define SIGTRAP   24
 #define SIGURG    25
 #define SIGVTALRM 26
 #define SIGXCPU   27
 #define SIGXFSZ   28
-#define SIGWINCH  29
-#define SIGPWR    30
+
+/* These values are not kernel-related, and are emulated for userland by the */
+/* libc, we will map them to SIGUSR2, which userland wont be able to use. */
+#define SIGCANCEL SIGUSR2
+#define SIGWINCH SIGUSR2
+#define SIGIO    SIGUSR2
+#define SIGPWR   SIGUSR2
 
 /* siginfo->si_info constants */
 /* SIGBUS */
diff --git mlibc-clean/options/glibc/generic/execinfo.cpp mlibc-workdir/options/glibc/generic/execinfo.cpp
index 3474615..1ce0414 100644
--- mlibc-clean/options/glibc/generic/execinfo.cpp
+++ mlibc-workdir/options/glibc/generic/execinfo.cpp
@@ -2,8 +2,7 @@
 #include <bits/ensure.h>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git mlibc-clean/options/posix/generic/posix_string.cpp mlibc-workdir/options/posix/generic/posix_string.cpp
index 838b85b..8b0beec 100644
--- mlibc-clean/options/posix/generic/posix_string.cpp
+++ mlibc-workdir/options/posix/generic/posix_string.cpp
@@ -94,8 +94,6 @@ char *strsignal(int sig) {
 	CASE_FOR(SIGSEGV)
 	CASE_FOR(SIGTERM)
 	CASE_FOR(SIGPROF)
-	CASE_FOR(SIGIO)
-	CASE_FOR(SIGPWR)
 	CASE_FOR(SIGALRM)
 	CASE_FOR(SIGBUS)
 	CASE_FOR(SIGCHLD)
@@ -116,7 +114,6 @@ char *strsignal(int sig) {
 	CASE_FOR(SIGVTALRM)
 	CASE_FOR(SIGXCPU)
 	CASE_FOR(SIGXFSZ)
-	CASE_FOR(SIGWINCH)
 	default:
 		mlibc::infoLogger() << "mlibc: Unknown signal number " << sig << frg::endlog;
 		s = "Unknown signal number";
diff --git mlibc-clean/options/posix/generic/sys-shm.cpp mlibc-workdir/options/posix/generic/sys-shm.cpp
index 8782ae6..bfacac2 100644
--- mlibc-clean/options/posix/generic/sys-shm.cpp
+++ mlibc-workdir/options/posix/generic/sys-shm.cpp
@@ -4,6 +4,7 @@
 #include <bits/ensure.h>
 #include <mlibc/debug.hpp>
 #include <mlibc/posix-sysdeps.hpp>
+#include <sys/syscall.h>
 
 void *shmat(int shmid, const void *shmaddr, int shmflg) {
 	void *ret;
@@ -17,11 +18,7 @@ void *shmat(int shmid, const void *shmaddr, int shmflg) {
 
 int shmctl(int shmid, int cmd, struct shmid_ds *buf) {
 	int ret;
-	auto sysdep = MLIBC_CHECK_OR_ENOSYS(mlibc::sys_shmctl, -1);
-	if(int e = sysdep(&ret, shmid, cmd, buf); e) {
-		errno = e;
-		return -1;
-	}
+	SYSCALL3(SYSCALL_SHMCTL, shmid, cmd, buf);
 	return ret;
 }
 
diff --git mlibc-clean/options/rtld/generic/linker.cpp mlibc-workdir/options/rtld/generic/linker.cpp
index 848f7de..fbbb07f 100644
--- mlibc-clean/options/rtld/generic/linker.cpp
+++ mlibc-workdir/options/rtld/generic/linker.cpp
@@ -582,18 +582,27 @@ frg::expected<LinkerError, void> ObjectRepository::_fetchFromFile(SharedObject *
 
 				void *map_pointer;
 				if(mlibc::sys_vm_map(reinterpret_cast<void *>(map_address),
-						total_map_size, prot | PROT_WRITE,
+						total_map_size, PROT_WRITE,
 						MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0, &map_pointer))
 					__ensure(!"sys_vm_map failed");
 
 				__ensure(trySeek(fd, phdr->p_offset));
 				__ensure(tryReadExactly(fd, reinterpret_cast<char *>(map_address) + misalign,
 						phdr->p_filesz));
+
+				if (prot & PROT_EXEC) {
+					prot = PROT_READ | PROT_EXEC;
+				}
+				if (mlibc::sys_vm_protect(reinterpret_cast<void *>(map_address), total_map_size, prot)) {
+					__ensure(!"vm_protect not feeling all there");
+				}
 			#endif
 			// Take care of removing superfluous permissions.
+			/*
 			if(mlibc::sys_vm_protect && ((prot & PROT_WRITE) == 0))
 				if(mlibc::sys_vm_protect(map_pointer, total_map_size, prot))
 					mlibc::infoLogger() << "mlibc: sys_vm_protect() failed in ld.so" << frg::endlog;
+			*/
 		}else if(phdr->p_type == PT_TLS) {
 			object->tlsSegmentSize = phdr->p_memsz;
 			object->tlsAlignment = phdr->p_align;
@@ -1366,8 +1388,172 @@ int sys_statvfs(const char *path, struct statvfs *out) {
 	return 0;
 }
 
-int sys_getcwd(char *, size_t) {
-	__builtin_trap();
+int sys_getcwd(char *buf, size_t size) {
+  int fd = AT_FDCWD;
+  bool fd_needs_closing = false;
+  DIR *dirstream = NULL;
+  dev_t rootdev, thisdev;
+  ino_t rootino, thisino;
+  char *dir;
+  register char *dirp;
+  struct stat st;
+  size_t used;
+
+  if (size == 0 || buf == NULL) {
+      return EINVAL;
+  }
+
+  dir = buf;
+
+  dirp = dir + size;
+  *--dirp = '\0';
+
+  if (lstat (".", &st) < 0)
+    goto lose;
+  thisdev = st.st_dev;
+  thisino = st.st_ino;
+
+  if (lstat ("/", &st) < 0)
+    goto lose;
+  rootdev = st.st_dev;
+  rootino = st.st_ino;
+
+  while (!(thisdev == rootdev && thisino == rootino))
+    {
+      struct dirent *d;
+      dev_t dotdev;
+      ino_t dotino;
+      bool mount_point;
+      int parent_status;
+      size_t dirroom;
+      size_t namlen;
+      bool use_d_ino = true;
+
+      /* Look at the parent directory.  */
+      fd = openat (fd, "..", O_RDONLY);
+      if (fd < 0)
+        goto lose;
+      fd_needs_closing = true;
+      parent_status = fstat (fd, &st);
+      if (parent_status != 0)
+        goto lose;
+
+      if (dirstream && closedir (dirstream) != 0)
+        {
+          dirstream = NULL;
+          goto lose;
+        }
+
+      /* Figure out if this directory is a mount point.  */
+      dotdev = st.st_dev;
+      dotino = st.st_ino;
+      mount_point = dotdev != thisdev;
+
+      /* Search for the last directory.  */
+      dirstream = fdopendir (fd);
+      if (dirstream == NULL)
+        goto lose;
+      fd_needs_closing = false;
+      for (;;)
+        {
+          /* Clear errno to distinguish EOF from error if readdir returns
+             NULL.  */
+          errno = 0;
+          d = readdir (dirstream);
+
+          /* When we've iterated through all directory entries without finding
+             one with a matching d_ino, rewind the stream and consider each
+             name again, but this time, using lstat.  This is necessary in a
+             chroot on at least one system (glibc-2.3.6 + linux 2.6.12), where
+             .., ../.., ../../.., etc. all had the same device number, yet the
+             d_ino values for entries in / did not match those obtained
+             via lstat.  */
+          if (d == NULL && errno == 0 && use_d_ino)
+            {
+              use_d_ino = false;
+              rewinddir (dirstream);
+              d = readdir (dirstream);
+            }
+
+          if (d == NULL)
+            {
+              if (errno == 0)
+                /* EOF on dirstream, which can mean e.g., that the current
+                   directory has been removed.  */
+                errno = ENOENT;
+              goto lose;
+            }
+          if (d->d_name[0] == '.' &&
+              (d->d_name[1] == '\0' ||
+               (d->d_name[1] == '.' && d->d_name[2] == '\0')))
+            continue;
+
+          if (use_d_ino)
+            {
+              bool match = ((d->d_ino == thisino) || mount_point);
+              if (! match)
+                continue;
+            }
+
+          {
+            int entry_status;
+            entry_status = fstatat (fd, d->d_name, &st, AT_SYMLINK_NOFOLLOW);
+
+            /* We don't fail here if we cannot stat() a directory entry.
+               This can happen when (network) file systems fail.  If this
+               entry is in fact the one we are looking for we will find
+               out soon as we reach the end of the directory without
+               having found anything.  */
+            if (entry_status == 0 && S_ISDIR (st.st_mode)
+                && st.st_dev == thisdev && st.st_ino == thisino)
+              break;
+          }
+        }
+
+      dirroom = dirp - dir;
+      namlen = strlen (d->d_name);
+
+      if (dirroom <= namlen)
+        {
+          errno = ERANGE;
+          goto lose;
+        }
+      dirp -= namlen;
+      memcpy (dirp, d->d_name, namlen);
+      *--dirp = '/';
+
+      thisdev = dotdev;
+      thisino = dotino;
+    }
+
+  if (dirstream && closedir (dirstream) != 0)
+    {
+      dirstream = NULL;
+      goto lose;
+    }
+
+  if (dirp == &dir[size - 1])
+    *--dirp = '/';
+
+  used = dir + size - dirp;
+  memmove (dir, dirp, used);
+
+  return 0;
+
+ memory_exhausted:
+  errno = ENOMEM;
+ lose:
+  {
+    int save = errno;
+    if (dirstream)
+      closedir (dirstream);
+
+    if (fd_needs_closing)
+      close (fd);
+
+    errno = save;
+  }
+  return 1;
 }
 
 int sys_shmat(void **seg_start, int shmid, const void *shmaddr, int shmflg) {
