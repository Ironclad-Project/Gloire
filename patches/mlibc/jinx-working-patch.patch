diff --git mlibc-clean/options/internal/generic/charset.cpp mlibc-workdir/options/internal/generic/charset.cpp
index c42b4f4..232c229 100644
--- mlibc-clean/options/internal/generic/charset.cpp
+++ mlibc-workdir/options/internal/generic/charset.cpp
@@ -13,36 +13,28 @@ bool charset::is_ascii_superset() {
 bool charset::is_alpha(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_alpha() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_digit(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c >= '0' && c <= '9';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_digit() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_xdigit(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_xdigit() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_alnum(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_alnum() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
@@ -55,63 +47,49 @@ bool charset::is_punct(codepoint c) {
 				|| c == '@'
 				|| c == '[' || c == '\\' || c == ']' || c == '^' || c == '_' || c == '`'
 				|| c == '{' || c == '|' || c == '}' || c == '~';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_punct() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_graph(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c >= 0x21 && c <= 0x7E;
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_graph() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_blank(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c == ' ' || c == '\t';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_blank() is not implemented"
-				" for the full Unicode charset " << c << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_space(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_space() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_print(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c >= 0x20 && c <= 0x7E;
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_print() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_lower(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= 'a' && c <= 'z');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_print() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
 bool charset::is_upper(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return (c >= 'A' && c <= 'Z');
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::is_print() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return false;
 }
 
@@ -119,9 +97,7 @@ codepoint charset::to_lower(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		if(c >= 'A' && c <= 'Z')
 			return c - 'A' + 'a';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::to_lower() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return c;
 }
 
@@ -129,9 +105,7 @@ codepoint charset::to_upper(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		if(c >= 'a' && c <= 'z')
 			return c - 'a' + 'A';
-	if(c > 0x7F)
-		mlibc::infoLogger() << "mlibc: charset::to_upper() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+
 	return c;
 }
 
diff --git mlibc-clean/options/internal/riscv64/setjmp.S mlibc-workdir/options/internal/riscv64/setjmp.S
index 7ce9cfb..222954f 100644
--- mlibc-clean/options/internal/riscv64/setjmp.S
+++ mlibc-workdir/options/internal/riscv64/setjmp.S
@@ -36,7 +36,34 @@ _setjmp:
 .global sigsetjmp
 .type sigsetjmp, "function"
 sigsetjmp:
-	unimp // TODO
+	sd ra, 0(a0)
+	sd s0, 8(a0)
+	sd s1, 16(a0)
+	sd s2, 24(a0)
+	sd s3, 32(a0)
+	sd s4, 40(a0)
+	sd s5, 48(a0)
+	sd s6, 56(a0)
+	sd s7, 64(a0)
+	sd s8, 72(a0)
+	sd s9, 80(a0)
+	sd s10, 88(a0)
+	sd s11, 96(a0)
+	sd sp, 104(a0)
+	fsd fs0, 112(a0)
+	fsd fs1, 120(a0)
+	fsd fs2, 128(a0)
+	fsd fs3, 136(a0)
+	fsd fs4, 144(a0)
+	fsd fs5, 152(a0)
+	fsd fs6, 160(a0)
+	fsd fs7, 168(a0)
+	fsd fs8, 176(a0)
+	fsd fs9, 184(a0)
+	fsd fs10, 192(a0)
+	fsd fs11, 200(a0)
+	li a0, 0
+	ret
 
 .global longjmp
 .type longjmp, "function"
diff --git mlibc-clean/options/posix/generic/posix_locale.cpp mlibc-workdir/options/posix/generic/posix_locale.cpp
index bd8710a..feb59ee 100644
--- mlibc-clean/options/posix/generic/posix_locale.cpp
+++ mlibc-workdir/options/posix/generic/posix_locale.cpp
@@ -25,7 +25,7 @@ void freelocale(locale_t) {
 
 locale_t uselocale(locale_t) {
 	if(!uselocale_seen) {
-		mlibc::infoLogger() << "mlibc: uselocale() is a no-op" << frg::endlog;
+		//mlibc::infoLogger() << "mlibc: uselocale() is a no-op" << frg::endlog;
 		uselocale_seen = true;
 	}
 	return nullptr;
diff --git mlibc-workdir/options/posix/include/sys/ioccom.h mlibc-workdir/options/posix/include/sys/ioccom.h
new file mode 100644
index 0000000..8896624
--- /dev/null
+++ mlibc-workdir/options/posix/include/sys/ioccom.h
@@ -0,0 +1,82 @@
+/*	$NetBSD: ioccom.h,v 1.13 2019/05/26 10:21:33 hannken Exp $	*/
+
+/*-
+ * Copyright (c) 1982, 1986, 1990, 1993, 1994
+ *	The Regents of the University of California.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ *	@(#)ioccom.h	8.3 (Berkeley) 1/9/95
+ */
+
+#ifndef	_SYS_IOCCOM_H_
+#define	_SYS_IOCCOM_H_
+
+/*
+ * Ioctl's have the command encoded in the lower word, and the size of
+ * any in or out parameters in the upper word.  The high 3 bits of the
+ * upper word are used to encode the in/out status of the parameter.
+ *
+ *	 31 29 28                     16 15            8 7             0
+ *	+---------------------------------------------------------------+
+ *	| I/O | Parameter Length        | Command Group | Command       |
+ *	+---------------------------------------------------------------+
+ */
+#define	IOCPARM_MASK	0x1fff		/* parameter length, at most 13 bits */
+#define	IOCPARM_SHIFT	16
+#define	IOCGROUP_SHIFT	8
+#define	IOCPARM_LEN(x)	(((x) >> IOCPARM_SHIFT) & IOCPARM_MASK)
+#define	IOCBASECMD(x)	((x) & ~(IOCPARM_MASK << IOCPARM_SHIFT))
+#define	IOCGROUP(x)	(((x) >> IOCGROUP_SHIFT) & 0xff)
+
+#define	IOCPARM_MAX	NBPG	/* max size of ioctl args, mult. of NBPG */
+				/* no parameters */
+#define	IOC_VOID	(unsigned long)0x20000000
+				/* copy parameters out */
+#define	IOC_OUT		(unsigned long)0x40000000
+				/* copy parameters in */
+#define	IOC_IN		(unsigned long)0x80000000
+				/* copy parameters in and out */
+#define	IOC_INOUT	(IOC_IN|IOC_OUT)
+				/* mask for IN/OUT/VOID */
+#define	IOC_DIRMASK	(unsigned long)0xe0000000
+
+#define	_IOC(inout, group, num, len) \
+    ((inout) | (((len) & IOCPARM_MASK) << IOCPARM_SHIFT) | \
+    ((group) << IOCGROUP_SHIFT) | (num))
+#define	_IO(g,n)	_IOC(IOC_VOID,	(g), (n), 0)
+#define	_IOR(g,n,t)	_IOC(IOC_OUT,	(g), (n), sizeof(t))
+#define	_IOW(g,n,t)	_IOC(IOC_IN,	(g), (n), sizeof(t))
+/* this should be _IORW, but stdio got there first */
+#define	_IOWR(g,n,t)	_IOC(IOC_INOUT,	(g), (n), sizeof(t))
+
+#define IOCSNPRINTF(buf, len, cmd) \
+    snprintf((buf), (len), "_IO%s%s('%c', %hhu)", \
+	(((cmd) >> 30) & 1) ? "R" : "", \
+	(((cmd) >> 30) & 2) ? "W" : "", \
+	(char)IOCGROUP(cmd), (unsigned char)(cmd))
+
+
+#endif /* !_SYS_IOCCOM_H_ */
diff --git mlibc-clean/options/posix/meson.build mlibc-workdir/options/posix/meson.build
index 681c99b..f596893 100644
--- mlibc-clean/options/posix/meson.build
+++ mlibc-workdir/options/posix/meson.build
@@ -129,6 +129,7 @@ if not no_headers
 	install_headers(
 		'include/sys/fcntl.h',
 		'include/sys/file.h',
+		'include/sys/ioccom.h',
 		'include/sys/ipc.h',
 		'include/sys/mman.h',
 		'include/sys/msg.h',
diff --git mlibc-clean/sysdeps/ironclad/generic/generic.cpp mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
index 072c0d1..efaecaa 100644
--- mlibc-clean/sysdeps/ironclad/generic/generic.cpp
+++ mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
@@ -219,7 +219,6 @@ int sys_fallocate(int fd, off_t offset, size_t size) {
 }
 
 int sys_flock(int fd, int options) {
-	//  XXX: Shouldnt this use F_SETLKW and F_SETLK only when LOCK_NB ?
 	struct flock lock;
 	lock.l_whence = SEEK_SET;
 	lock.l_start = 0;
@@ -240,8 +239,9 @@ int sys_flock(int fd, int options) {
 			return -1;
 	}
 
+	int command = options & LOCK_NB ? F_SETLK : F_SETLKW;
 	int ret, errno;
-	SYSCALL3(SYSCALL_FCNTL, fd, F_SETLK, &lock);
+	SYSCALL3(SYSCALL_FCNTL, fd, command, &lock);
 	return errno;
 }
 
@@ -1532,7 +1532,7 @@ int sys_openpty(int *mfd, int *sfd, char *name, const struct termios *ios, const
 	}
 
 	if (ios == NULL) {
-		struct termios termios;
+		struct termios termios = {};
 		termios.c_iflag = BRKINT | IGNPAR | ICRNL | IXON | IMAXBEL;
 		termios.c_oflag = OPOST | ONLCR;
 		termios.c_cflag = CS8 | CREAD;
