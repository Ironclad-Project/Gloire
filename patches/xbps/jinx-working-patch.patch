diff --git xbps-clean/bin/xbps-create/main.c xbps-workdir/bin/xbps-create/main.c
index 373e744..73ed280 100644
--- xbps-clean/bin/xbps-create/main.c
+++ xbps-workdir/bin/xbps-create/main.c
@@ -41,7 +41,7 @@
 #include <libgen.h>
 #include <locale.h>
 #include <dirent.h>
-
+#include <limits.h>
 #include <xbps.h>
 #include "queue.h"
 
diff --git xbps-clean/bin/xbps-install/util.c xbps-workdir/bin/xbps-install/util.c
index 7cabdd1..22264a4 100644
--- xbps-clean/bin/xbps-install/util.c
+++ xbps-workdir/bin/xbps-install/util.c
@@ -32,185 +32,185 @@
 #include <strings.h>
 #include <sys/ioctl.h>
 #include <assert.h>
-
+#include <termios.h>
 #include <xbps.h>
 #include "defs.h"
 
 int
 get_maxcols(void)
 {
-	struct winsize ws;
-
-	if (!isatty(STDOUT_FILENO)) {
-		/* not a TTY, don't use any limit */
-		return 0;
-	}
-	if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1) {
-		/* 80x24 terminal */
-		return 80;
-	}
-	/* TTY columns */
-	return ws.ws_col;
+   struct winsize ws;
+
+   if (!isatty(STDOUT_FILENO)) {
+      /* not a TTY, don't use any limit */
+      return 0;
+   }
+   if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1) {
+      /* 80x24 terminal */
+      return 80;
+   }
+   /* TTY columns */
+   return ws.ws_col;
 }
 
 void
 print_package_line(const char *str, unsigned int maxcols, bool reset)
 {
-	static unsigned int cols;
-	static bool first;
-
-	if (reset) {
-		cols = 0;
-		first = false;
-		return;
-	}
-	cols += strlen(str) + 4;
-	if (cols <= maxcols) {
-		if (first == false) {
-			printf("  ");
-			first = true;
-		}
-	} else {
-		printf("\n  ");
-		cols = strlen(str) + 4;
-	}
-	printf("%s ", str);
+   static unsigned int cols;
+   static bool first;
+
+   if (reset) {
+      cols = 0;
+      first = false;
+      return;
+   }
+   cols += strlen(str) + 4;
+   if (cols <= maxcols) {
+      if (first == false) {
+         printf("  ");
+         first = true;
+      }
+   } else {
+      printf("\n  ");
+      cols = strlen(str) + 4;
+   }
+   printf("%s ", str);
 }
 
 static unsigned int
 find_longest_pkgname(struct transaction *trans)
 {
-	xbps_object_t obj;
-	const char *pkgname;
-	unsigned int len = 0, max = 0;
-
-	while ((obj = xbps_object_iterator_next(trans->iter)) != NULL) {
-		if (!xbps_dictionary_get_cstring_nocopy(obj, "pkgname", &pkgname))
-			continue;
-		len = strlen(pkgname);
-		if (max == 0 || len > max)
-			max = len;
-	}
-	xbps_object_iterator_reset(trans->iter);
-	return max+1;
+   xbps_object_t obj;
+   const char *pkgname;
+   unsigned int len = 0, max = 0;
+
+   while ((obj = xbps_object_iterator_next(trans->iter)) != NULL) {
+      if (!xbps_dictionary_get_cstring_nocopy(obj, "pkgname", &pkgname))
+         continue;
+      len = strlen(pkgname);
+      if (max == 0 || len > max)
+         max = len;
+   }
+   xbps_object_iterator_reset(trans->iter);
+   return max+1;
 }
 
 bool
 print_trans_colmode(struct transaction *trans, unsigned int cols)
 {
-	xbps_dictionary_t ipkgd;
-	xbps_object_t obj;
-	xbps_trans_type_t ttype;
-	const char *pkgver, *pkgname, *ipkgver, *ver, *iver, *tract;
-	char size[8];
-	uint64_t dlsize = 0;
-	unsigned int x, blen, pnamelen, hdrlen;
-
-	pnamelen = find_longest_pkgname(trans);
-	/* header length */
-	hdrlen = pnamelen + 61;
-	if (cols <= hdrlen)
-		return false;
-
-	printf("\nName ");
-	if (pnamelen < 5)
-		pnamelen = 5;
-
-	for (x = 5; x < pnamelen; x++)
-		printf(" ");
-
-	printf("Action    Version           New version            Download size\n");
-
-	while ((obj = xbps_object_iterator_next(trans->iter)) != NULL) {
-		bool dload = false;
-
-		pkgver = pkgname = ipkgver = ver = iver = NULL;
-		xbps_dictionary_get_cstring_nocopy(obj, "pkgver", &pkgver);
-		xbps_dictionary_get_cstring_nocopy(obj, "pkgname", &pkgname);
-		xbps_dictionary_get_uint64(obj, "filename-size", &dlsize);
-		xbps_dictionary_get_bool(obj, "download", &dload);
-
-		ttype = xbps_transaction_pkg_type(obj);
-
-		tract = "unknown";
-		if (trans->xhp->flags & XBPS_FLAG_DOWNLOAD_ONLY) {
-			tract = "download";
-		}
-
-		if (ttype == XBPS_TRANS_INSTALL) {
-			trans->inst_pkgcnt++;
-			tract = "install";
-		} else if (ttype == XBPS_TRANS_REINSTALL) {
-			trans->inst_pkgcnt++;
-			tract = "reinstall";
-		} else if (ttype == XBPS_TRANS_UPDATE) {
-			trans->up_pkgcnt++;
-			tract = "update";
-		} else if (ttype == XBPS_TRANS_REMOVE) {
-			trans->rm_pkgcnt++;
-			tract = "remove";
-		} else if (ttype == XBPS_TRANS_CONFIGURE) {
-			trans->cf_pkgcnt++;
-			tract = "configure";
-		} else if (ttype == XBPS_TRANS_HOLD) {
-			tract = "hold";
-		} else if (ttype == XBPS_TRANS_DOWNLOAD) {
-			tract = "download";
-		}
-		if (dload) {
-			trans->dl_pkgcnt++;
-		}
-
-		ipkgd = xbps_pkgdb_get_pkg(trans->xhp, pkgname);
-		if (trans->xhp->flags & XBPS_FLAG_DOWNLOAD_ONLY) {
-			ipkgd = NULL;
-		}
-		if (ipkgd) {
-			xbps_dictionary_get_cstring_nocopy(ipkgd, "pkgver", &ipkgver);
-			iver = xbps_pkg_version(ipkgver);
-		}
-		ver = xbps_pkg_version(pkgver);
-		if (iver) {
-			int rv = xbps_cmpver(iver, ver);
-			if (rv == 1 && ttype != XBPS_TRANS_HOLD)
-				tract = "downgrade";
-		}
-		/* print pkgname and some blanks */
-		blen = pnamelen - strlen(pkgname);
-		printf("%s", pkgname);
-		for (x = 0; x < blen; x++)
-			printf(" ");
-
-		/* print action */
-		printf("%s ", tract);
-		for (x = strlen(tract); x < 9; x++)
-			printf(" ");
-
-		/* print installed version */
-		if (iver == NULL)
-			iver = "-";
-
-		/* print new version */
-		printf("%s ", iver);
-		for (x = strlen(iver); x < 17; x++)
-			printf(" ");
-
-		if (ttype == XBPS_TRANS_REMOVE) {
-			ver = "-";
-		}
-		if (dload)
-			(void)xbps_humanize_number(size, (int64_t)dlsize);
-		else {
-			size[0] = '-';
-			size[1] = '\0';
-		}
-		printf("%s ", ver);
-		for (x = strlen(ver); x < 22; x++)
-			printf(" ");
-		/* print download size */
-		printf("%s ", size);
-		printf("\n");
-	}
-	xbps_object_iterator_reset(trans->iter);
-	return true;
+   xbps_dictionary_t ipkgd;
+   xbps_object_t obj;
+   xbps_trans_type_t ttype;
+   const char *pkgver, *pkgname, *ipkgver, *ver, *iver, *tract;
+   char size[8];
+   uint64_t dlsize = 0;
+   unsigned int x, blen, pnamelen, hdrlen;
+
+   pnamelen = find_longest_pkgname(trans);
+   /* header length */
+   hdrlen = pnamelen + 61;
+   if (cols <= hdrlen)
+      return false;
+
+   printf("\nName ");
+   if (pnamelen < 5)
+      pnamelen = 5;
+
+   for (x = 5; x < pnamelen; x++)
+      printf(" ");
+
+   printf("Action    Version           New version            Download size\n");
+
+   while ((obj = xbps_object_iterator_next(trans->iter)) != NULL) {
+      bool dload = false;
+
+      pkgver = pkgname = ipkgver = ver = iver = NULL;
+      xbps_dictionary_get_cstring_nocopy(obj, "pkgver", &pkgver);
+      xbps_dictionary_get_cstring_nocopy(obj, "pkgname", &pkgname);
+      xbps_dictionary_get_uint64(obj, "filename-size", &dlsize);
+      xbps_dictionary_get_bool(obj, "download", &dload);
+
+      ttype = xbps_transaction_pkg_type(obj);
+
+      tract = "unknown";
+      if (trans->xhp->flags & XBPS_FLAG_DOWNLOAD_ONLY) {
+         tract = "download";
+      }
+
+      if (ttype == XBPS_TRANS_INSTALL) {
+         trans->inst_pkgcnt++;
+         tract = "install";
+      } else if (ttype == XBPS_TRANS_REINSTALL) {
+         trans->inst_pkgcnt++;
+         tract = "reinstall";
+      } else if (ttype == XBPS_TRANS_UPDATE) {
+         trans->up_pkgcnt++;
+         tract = "update";
+      } else if (ttype == XBPS_TRANS_REMOVE) {
+         trans->rm_pkgcnt++;
+         tract = "remove";
+      } else if (ttype == XBPS_TRANS_CONFIGURE) {
+         trans->cf_pkgcnt++;
+         tract = "configure";
+      } else if (ttype == XBPS_TRANS_HOLD) {
+         tract = "hold";
+      } else if (ttype == XBPS_TRANS_DOWNLOAD) {
+         tract = "download";
+      }
+      if (dload) {
+         trans->dl_pkgcnt++;
+      }
+
+      ipkgd = xbps_pkgdb_get_pkg(trans->xhp, pkgname);
+      if (trans->xhp->flags & XBPS_FLAG_DOWNLOAD_ONLY) {
+         ipkgd = NULL;
+      }
+      if (ipkgd) {
+         xbps_dictionary_get_cstring_nocopy(ipkgd, "pkgver", &ipkgver);
+         iver = xbps_pkg_version(ipkgver);
+      }
+      ver = xbps_pkg_version(pkgver);
+      if (iver) {
+         int rv = xbps_cmpver(iver, ver);
+         if (rv == 1 && ttype != XBPS_TRANS_HOLD)
+            tract = "downgrade";
+      }
+      /* print pkgname and some blanks */
+      blen = pnamelen - strlen(pkgname);
+      printf("%s", pkgname);
+      for (x = 0; x < blen; x++)
+         printf(" ");
+
+      /* print action */
+      printf("%s ", tract);
+      for (x = strlen(tract); x < 9; x++)
+         printf(" ");
+
+      /* print installed version */
+      if (iver == NULL)
+         iver = "-";
+
+      /* print new version */
+      printf("%s ", iver);
+      for (x = strlen(iver); x < 17; x++)
+         printf(" ");
+
+      if (ttype == XBPS_TRANS_REMOVE) {
+         ver = "-";
+      }
+      if (dload)
+         (void)xbps_humanize_number(size, (int64_t)dlsize);
+      else {
+         size[0] = '-';
+         size[1] = '\0';
+      }
+      printf("%s ", ver);
+      for (x = strlen(ver); x < 22; x++)
+         printf(" ");
+      /* print download size */
+      printf("%s ", size);
+      printf("\n");
+   }
+   xbps_object_iterator_reset(trans->iter);
+   return true;
 }
diff --git xbps-clean/configure xbps-workdir/configure
index 57df730..0a73324 100755
--- xbps-clean/configure
+++ xbps-workdir/configure
@@ -275,7 +275,7 @@ fi
 #
 # Check for some compiler warning flags.
 #
-for f in all extra error shadow "format=2" missing-prototypes \
+for f in all extra shadow "format=2" missing-prototypes \
 	missing-declarations nested-externs vla overlength-strings \
 	unsafe-loop-optimizations undef sign-compare \
 	missing-include-dirs old-style-definition \
@@ -677,7 +677,7 @@ fi
 # pkg-config is required to know dependencies for static linking.
 #
 printf "Checking for pkg-config ... "
-PKGCONFIG_BIN=$(_which pkg-config)
+PKGCONFIG_BIN="x86_64-pc-ironclad-mlibc-pkg-config"
 if [ -z "$PKGCONFIG_BIN" ]; then
 	echo "not found, exiting."
 	exit 1
@@ -691,14 +691,14 @@ fi
 LIBARCHIVE_REQVER=3.3.3
 
 printf "Checking for libarchive >= ${LIBARCHIVE_REQVER}  via pkg-config ... "
-if ! pkg-config --atleast-version=${LIBARCHIVE_REQVER} libarchive; then
+if ! $PKGCONFIG_BIN --atleast-version=${LIBARCHIVE_REQVER} libarchive; then
 	echo "libarchive.pc file not found, exiting."
 	exit 1
 else
-	echo "found version $(pkg-config --modversion libarchive)."
-	echo "CFLAGS += $(pkg-config --cflags libarchive)" >>$CONFIG_MK
-	echo "LDFLAGS +=        $(pkg-config --libs libarchive)" >>$CONFIG_MK
-	echo "STATIC_LIBS +=    $(pkg-config --libs --static libarchive)" \
+	echo "found version $($PKGCONFIG_BIN --modversion libarchive)."
+	echo "CFLAGS += $($PKGCONFIG_BIN --cflags libarchive)" >>$CONFIG_MK
+	echo "LDFLAGS +=        $($PKGCONFIG_BIN --libs libarchive)" >>$CONFIG_MK
+	echo "STATIC_LIBS +=    $($PKGCONFIG_BIN --libs --static libarchive)" \
 		>>$CONFIG_MK
 fi
 
@@ -706,17 +706,17 @@ fi
 # libssl with pkg-config support is required.
 #
 printf "Checking for libssl via pkg-config ... "
-if pkg-config --exists 'libssl' && ! pkg-config --exists libtls ; then
-	echo "found OpenSSL version $(pkg-config --modversion libssl)."
-elif pkg-config --exists libssl libtls; then
-	echo "found LibreSSL version $(pkg-config --modversion libssl)."
+if $PKGCONFIG_BIN --exists 'libssl' && ! $PKGCONFIG_BIN --exists libtls ; then
+	echo "found OpenSSL version $($PKGCONFIG_BIN --modversion libssl)."
+elif $PKGCONFIG_BIN --exists libssl libtls; then
+	echo "found LibreSSL version $($PKGCONFIG_BIN --modversion libssl)."
 else
 	echo "libssl.pc file not found or incompatible version detected, exiting."
 	exit 1
 fi
-echo "CFLAGS += $(pkg-config --cflags libssl)" >>$CONFIG_MK
-echo "LDFLAGS +=        $(pkg-config --libs libssl)" >>$CONFIG_MK
-echo "STATIC_LIBS +=    $(pkg-config --libs --static libssl)" \
+echo "CFLAGS += $($PKGCONFIG_BIN --cflags libssl)" >>$CONFIG_MK
+echo "LDFLAGS +=        $($PKGCONFIG_BIN --libs libssl)" >>$CONFIG_MK
+echo "STATIC_LIBS +=    $($PKGCONFIG_BIN --libs --static libssl)" \
 	>>$CONFIG_MK
 
 #
@@ -734,13 +734,13 @@ fi
 #
 if [ "$BUILD_TESTS" = "yes" ]; then
 	printf "Checking for ATF via pkg-config ... "
-	if ! pkg-config --atleast-version=0.15 atf-c; then
+	if ! $PKGCONFIG_BIN --atleast-version=0.15 atf-c; then
 		echo "ATF >= 0.15 not found in PKG_CONFIG_LIBDIR, exiting."
 		exit 1
 	fi
-	echo "found version $(pkg-config --modversion atf-c)."
-	echo "TEST_CFLAGS += $(pkg-config --cflags atf-c)" >>$CONFIG_MK
-	echo "TEST_LDFLAGS += $(pkg-config --libs atf-c)" >>$CONFIG_MK
+	echo "found version $($PKGCONFIG_BIN --modversion atf-c)."
+	echo "TEST_CFLAGS += $($PKGCONFIG_BIN --cflags atf-c)" >>$CONFIG_MK
+	echo "TEST_LDFLAGS += $($PKGCONFIG_BIN --libs atf-c)" >>$CONFIG_MK
 	echo "BUILD_TESTS = yes" >>$CONFIG_MK
 	BUILD_TESTS_VALUE=yes
 else
diff --git xbps-clean/lib/fetch/ftp.c xbps-workdir/lib/fetch/ftp.c
index 28296a0..f543ce1 100644
--- xbps-clean/lib/fetch/ftp.c
+++ xbps-workdir/lib/fetch/ftp.c
@@ -79,7 +79,7 @@
 #include <string.h>
 #include <time.h>
 #include <unistd.h>
-
+#include <strings.h>
 #include "fetch.h"
 #include "common.h"
 #include "ftperr.h"
@@ -147,7 +147,7 @@ unmappedaddr(struct sockaddr_in6 *sin6, socklen_t *len)
 	sin4->sin_port = port;
 	sin4->sin_family = AF_INET;
 	*len = sizeof(struct sockaddr_in);
-#ifndef __linux__
+#if !defined(__linux__) && !defined(__ironclad__)
 	sin4->sin_len = sizeof(struct sockaddr_in);
 #endif
 }
diff --git xbps-clean/lib/fetch/http.c xbps-workdir/lib/fetch/http.c
index f7b9142..d68b8f8 100644
--- xbps-clean/lib/fetch/http.c
+++ xbps-workdir/lib/fetch/http.c
@@ -78,7 +78,7 @@
 #include <string.h>
 #include <time.h>
 #include <unistd.h>
-
+#include <strings.h>
 #include <netinet/in.h>
 #include <netinet/tcp.h>
 
