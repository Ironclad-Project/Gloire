diff --git mlibc-clean/options/internal/generic/charset.cpp mlibc-workdir/options/internal/generic/charset.cpp
index c42b4f4..011d9c0 100644
--- mlibc-clean/options/internal/generic/charset.cpp
+++ mlibc-workdir/options/internal/generic/charset.cpp
@@ -91,9 +91,9 @@ bool charset::is_space(codepoint c) {
 bool charset::is_print(codepoint c) {
 	if(c <= 0x7F && is_ascii_superset())
 		return c >= 0x20 && c <= 0x7E;
-	if(c > 0x7F)
+	/*if(c > 0x7F)
 		mlibc::infoLogger() << "mlibc: charset::is_print() is not implemented"
-				" for the full Unicode charset" << frg::endlog;
+				" for the full Unicode charset" << frg::endlog;*/
 	return false;
 }
 
diff --git mlibc-clean/options/posix/include/fcntl.h mlibc-workdir/options/posix/include/fcntl.h
index 9983219..b43929d 100644
--- mlibc-clean/options/posix/include/fcntl.h
+++ mlibc-workdir/options/posix/include/fcntl.h
@@ -62,9 +62,6 @@ ssize_t vmsplice(int fd, const struct iovec *iov, size_t nr_segs, unsigned int f
 
 #define AT_NO_AUTOMOUNT 0x800
 
-#define F_SETPIPE_SZ 1031
-#define F_GETPIPE_SZ 1032
-
 #define FALLOC_FL_KEEP_SIZE 1
 #define FALLOC_FL_PUNCH_HOLE 2
 
diff --git mlibc-clean/options/rtdl/generic/linker.cpp mlibc-workdir/options/rtdl/generic/linker.cpp
index a0f2bf5..4c3a8c6 100644
--- mlibc-clean/options/rtdl/generic/linker.cpp
+++ mlibc-workdir/options/rtdl/generic/linker.cpp
@@ -514,18 +514,25 @@ void ObjectRepository::_fetchFromFile(SharedObject *object, int fd) {
 
 				void *map_pointer;
 				if(mlibc::sys_vm_map(reinterpret_cast<void *>(map_address),
-						total_map_size, prot | PROT_WRITE,
+						total_map_size, PROT_WRITE,
 						MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0, &map_pointer))
 					__ensure(!"sys_vm_map failed");
 
 				seekOrDie(fd, phdr->p_offset);
 				readExactlyOrDie(fd, reinterpret_cast<char *>(map_address) + misalign,
 						phdr->p_filesz);
+
+				if (prot & PROT_EXEC) {
+				   prot = PROT_READ | PROT_EXEC;
+			   }
+				if (mlibc::sys_vm_protect (reinterpret_cast<void *>(map_address),
+				      total_map_size, prot))
+				   __ensure(!"vm_protect not feeling all there");
 			#endif
 			// Take care of removing superfluous permissions.
-			if(mlibc::sys_vm_protect && ((prot & PROT_WRITE) == 0))
-				if(mlibc::sys_vm_protect(map_pointer, total_map_size, prot))
-					mlibc::infoLogger() << "mlibc: sys_vm_protect() failed in ld.so" << frg::endlog;
+			//if(mlibc::sys_vm_protect && ((prot & PROT_WRITE) == 0))
+			//	if(mlibc::sys_vm_protect(map_pointer, total_map_size, prot))
+			//		mlibc::infoLogger() << "mlibc: sys_vm_protect() failed in ld.so" << frg::endlog;
 		}else if(phdr->p_type == PT_TLS) {
 			object->tlsSegmentSize = phdr->p_memsz;
 			object->tlsAlignment = phdr->p_align;
diff --git mlibc-clean/sysdeps/ironclad/generic/generic.cpp mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
index 7136150..f91b6e1 100644
--- mlibc-clean/sysdeps/ironclad/generic/generic.cpp
+++ mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
@@ -202,6 +202,19 @@ int sys_flock(int fd, int options) {
 	return errno;
 }
 
+int sys_getpriority(int which, id_t who, int *value) {
+	int ret, errno;
+	SYSCALL2(SYSCALL_GETPRIO, which, who);
+   *value = ret;
+   return errno;
+}
+
+int sys_setpriority(int which, id_t who, int value) {
+	int ret, errno;
+	SYSCALL3(SYSCALL_SETPRIO, which, who, value);
+   return errno;
+}
+
 int sys_getrusage(int scope, struct rusage *usage) {
 	int ret, errno;
 	SYSCALL2(SYSCALL_GETRUSAGE, scope, usage);
@@ -1165,5 +1178,55 @@ int sys_mknodat(int dirfd, const char *path, mode_t mode, dev_t dev) {
 	return errno;
 }
 
+#define SC_LIST_MOUNTS 9
+struct mountinfo {
+    uint32_t type;
+    uint32_t flags;
+    char     source[20];
+    uint32_t source_length;
+    char     location[20];
+    uint32_t location_length;
+    uint64_t block_size;
+    uint64_t fragment_size;
+    uint64_t size_in_fragments;
+    uint64_t free_blocks;
+    uint64_t free_blocks_user;
+    uint64_t inode_count;
+    uint64_t free_inodes;
+    uint64_t free_inodes_user;
+    uint64_t max_filename;
+};
+
+int sys_statvfs(const char *path, struct statvfs *out) {
+   long ret, errno;
+   struct mountinfo *buffer = (mountinfo *)malloc(5 * sizeof(struct mountinfo));
+   SYSCALL3(SYSCALL_SYSCONF, SC_LIST_MOUNTS, buffer, 5 * sizeof(struct mountinfo));
+   if (errno) {
+      free(buffer);
+      return errno;
+   } else if (ret > 5) {
+      free(buffer);
+      return 1;
+   }
+
+   for (int i = 0; i < ret; i++) {
+      if (!strncmp(path, buffer[i].location, buffer[i].location_length)) {
+         out->f_bsize  = buffer[i].block_size;
+         out->f_frsize = buffer[i].fragment_size;
+         out->f_blocks = buffer[i].size_in_fragments;
+         out->f_bfree  = buffer[i].free_blocks;
+         out->f_bavail = buffer[i].free_blocks_user;
+         out->f_files  = buffer[i].inode_count;
+         out->f_ffree  = buffer[i].free_inodes;
+         out->f_favail = buffer[i].free_inodes_user;
+         out->f_fsid   = 0;
+         out->f_flag   = buffer[i].flags;
+         out->f_namemax = buffer[i].max_filename;
+         return 0;
+      }
+   }
+
+   return EINVAL;
+}
 #endif
 } // namespace mlibc
diff --git mlibc-clean/sysdeps/ironclad/include/sys/syscall.h mlibc-workdir/sysdeps/ironclad/include/sys/syscall.h
index b0227d5..e4fc00a 100644
--- mlibc-clean/sysdeps/ironclad/include/sys/syscall.h
+++ mlibc-workdir/sysdeps/ironclad/include/sys/syscall.h
@@ -166,5 +166,7 @@
 #define SYSCALL_ACTUALLY_KILL        79
 #define SYSCALL_SIGNALPOST           80
 #define SYSCALL_SEND_SIGNAL          81
+#define SYSCALL_GETPRIO              82
+#define SYSCALL_SETPRIO              83
 
 #endif // _SYS_SYSCALL_H
