diff --git mlibc-workdir/abis/ironclad/abi.h mlibc-workdir/abis/ironclad/abi.h
new file mode 100644
index 0000000..d522358
--- /dev/null
+++ mlibc-workdir/abis/ironclad/abi.h
@@ -0,0 +1,30 @@
+#ifndef _ABIBITS_ABI_H
+#define _ABIBITS_ABI_H
+
+// reserve 3 bits for the access mode
+#define __MLIBC_O_ACCMODE 0x0007
+#define __MLIBC_O_RDONLY 1
+#define __MLIBC_O_WRONLY 2
+#define __MLIBC_O_RDWR   3
+#define __MLIBC_O_SEARCH 4
+#define __MLIBC_O_EXEC   7
+
+// This flags are stubs.
+#define __MLIBC_O_APPEND 0x00008
+#define __MLIBC_O_CREAT 0x00010
+#define __MLIBC_O_DIRECTORY 0x00020
+#define __MLIBC_O_EXCL 0x00040
+#define __MLIBC_O_NOCTTY 0x00080
+#define __MLIBC_O_NOFOLLOW 0x00100
+#define __MLIBC_O_TRUNC 0x00200
+#define __MLIBC_O_NONBLOCK 0x00400
+#define __MLIBC_O_DSYNC 0x00800
+#define __MLIBC_O_RSYNC 0x01000
+#define __MLIBC_O_SYNC 0x02000
+#define __MLIBC_O_CLOEXEC 0x04000
+#define __MLIBC_O_PATH 0x08000
+#define __MLIBC_O_LARGEFILE 0x10000
+#define __MLIBC_O_NOATIME 0x20000
+#define __MLIBC_O_TMPFILE 0x40000
+
+#endif // _ABIBITS_ABI_H
diff --git mlibc-workdir/abis/ironclad/auxv.h mlibc-workdir/abis/ironclad/auxv.h
new file mode 100644
index 0000000..ef2e45a
--- /dev/null
+++ mlibc-workdir/abis/ironclad/auxv.h
@@ -0,0 +1,12 @@
+#ifndef _ABIBITS_AUXV_H
+#define _ABIBITS_AUXV_H
+
+#define AT_PHDR 3
+#define AT_PHENT 4
+#define AT_PHNUM 5
+#define AT_ENTRY 9
+#define AT_SECURE 23
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+
+#endif
diff --git mlibc-workdir/abis/ironclad/seek-whence.h mlibc-workdir/abis/ironclad/seek-whence.h
new file mode 100644
index 0000000..617b6f4
--- /dev/null
+++ mlibc-workdir/abis/ironclad/seek-whence.h
@@ -0,0 +1,8 @@
+#ifndef _ABIBITS_SEEK_WHENCE_H
+#define _ABIBITS_SEEK_WHENCE_H
+
+#define SEEK_SET 1
+#define SEEK_CUR 2
+#define SEEK_END 4
+
+#endif // _ABIBITS_SEEK_WHENCE_H
diff --git mlibc-clean/meson.build mlibc-workdir/meson.build
index 5b78f80..bd638b1 100644
--- mlibc-clean/meson.build
+++ mlibc-workdir/meson.build
@@ -1,4 +1,4 @@
-project('mlibc', default_options: ['warning_level=2', 'cpp_std=c++20'])
+project('mlibc', default_options: ['warning_level=2', 'cpp_std=gnu++20'])
 
 fs = import('fs')
 
@@ -120,6 +120,11 @@ elif host_machine.system() == 'qword'
 	rtdl_include_dirs += include_directories('sysdeps/qword/include')
 	libc_include_dirs += include_directories('sysdeps/qword/include')
 	subdir('sysdeps/qword')
+elif host_machine.system() == 'ironclad'
+	# disable_linux_option = true
+	rtdl_include_dirs += include_directories('sysdeps/ironclad/include')
+	libc_include_dirs += include_directories('sysdeps/ironclad/include')
+	subdir('sysdeps/ironclad')
 elif host_machine.system() == 'sigma'
 	#disable_linux_option = true
 	rtdl_include_dirs += include_directories('sysdeps/sigma/include')
diff --git mlibc-clean/options/ansi/include/inttypes.h mlibc-workdir/options/ansi/include/inttypes.h
index 8847bb0..bbc1403 100644
--- mlibc-clean/options/ansi/include/inttypes.h
+++ mlibc-workdir/options/ansi/include/inttypes.h
@@ -103,6 +103,8 @@
 #define SCNd32 "d"
 #define SCNd64 "ld"
 
+#define SCNdMAX "ld"
+
 #ifdef __cplusplus
 extern "C" {
 #endif
diff --git mlibc-clean/options/rtdl/generic/main.cpp mlibc-workdir/options/rtdl/generic/main.cpp
index 0d7b0a8..56d601e 100644
--- mlibc-clean/options/rtdl/generic/main.cpp
+++ mlibc-workdir/options/rtdl/generic/main.cpp
@@ -177,7 +177,7 @@ extern "C" void *interpreterMain(uintptr_t *entry_stack) {
 	}
 	__ensure(strtab_offset);
 	__ensure(soname_str);
-
+	
 	// Find the auxiliary vector by skipping args and environment.
 	auto aux = entryStack;
 	aux += *aux + 1; // First, we skip argc and all args.
diff --git mlibc-workdir/sysdeps/ironclad/crt-x86_64/crt0.S mlibc-workdir/sysdeps/ironclad/crt-x86_64/crt0.S
new file mode 100644
index 0000000..0a0a4a0
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/crt-x86_64/crt0.S
@@ -0,0 +1,7 @@
+
+.section .text
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
+
diff --git mlibc-workdir/sysdeps/ironclad/generic/entry.cpp mlibc-workdir/sysdeps/ironclad/generic/entry.cpp
new file mode 100644
index 0000000..ee7a794
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/generic/entry.cpp
@@ -0,0 +1,34 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/elf/startup.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[], char *env[])) {
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
+
diff --git mlibc-workdir/sysdeps/ironclad/generic/generic.cpp mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
new file mode 100644
index 0000000..3983f24
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
@@ -0,0 +1,450 @@
+#include <bits/ensure.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <errno.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <asm/ioctls.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <sys/syscall.h>
+
+#define STUB_ONLY { __ensure(!"STUB_ONLY function was called"); __builtin_unreachable(); }
+
+namespace mlibc {
+
+void sys_libc_log(const char *message) {
+   /*
+	ssize_t unused;
+	char new_line = '\n';
+	sys_write(1, message, strlen(message), &unused);
+	sys_write(1, &new_line, 1, &unused);
+   */
+}
+
+void sys_libc_panic() {
+	ssize_t unused;
+	char *message = "mlibc panicked unrecoverably\n";
+	sys_write(1, message, strlen(message), &unused);
+	sys_exit(1);
+}
+
+void sys_exit(int status) {
+	int ret, errno;
+	SYSCALL1(SYSCALL_EXIT, status);
+}
+
+int sys_tcb_set(void *pointer) {
+	int ret, errno;
+	SYSCALL1(SYSCALL_SET_TCB, pointer);
+	return errno;
+}
+
+int sys_open(const char *path, int flags, mode_t mode, int *fd) {
+	int ret, errno;
+	SYSCALL2(SYSCALL_OPEN, path, flags);
+	*fd = ret;
+	return errno;
+}
+
+int sys_open_dir(const char *path, int *handle) {
+	return sys_open(path, O_RDONLY, 0660, handle);
+}
+
+int sys_close(int fd) {
+	int ret, errno;
+	SYSCALL1(SYSCALL_CLOSE, fd);
+	return errno;
+}
+
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+	ssize_t ret;
+	int errno;
+	SYSCALL3(SYSCALL_READ, fd, buf, count);
+	*bytes_read = ret;
+	return errno;
+}
+
+int sys_write(int fd, const void *buf, size_t count, ssize_t *bytes_written) {
+	ssize_t ret;
+	int errno;
+	SYSCALL3(SYSCALL_WRITE, fd, buf, count);
+	*bytes_written = ret;
+	return errno;
+}
+
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+	ssize_t ret;
+	int errno;
+	SYSCALL3(SYSCALL_SEEK, fd, offset, whence);
+	*new_offset = ret;
+	return errno;
+}
+
+int sys_anon_allocate(size_t size, void **pointer) {
+	return sys_vm_map(NULL, size, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_ANON, 0, 0, pointer);
+}
+
+int sys_anon_free(void *pointer, size_t size) {
+	return sys_vm_unmap(pointer, size);
+}
+
+int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offset, void **window) {
+	void *ret;
+	int errno;
+	SYSCALL6(SYSCALL_MMAP, hint, size, prot, flags, fd, offset);
+	*window = ret;
+	return errno;
+}
+
+int sys_vm_unmap(void *pointer, size_t size) {
+	int ret;
+	int errno;
+	SYSCALL2(SYSCALL_MUNMAP, pointer, size);
+	if (ret != 0) {
+		return errno;
+	} else {
+		return 0;
+	}
+}
+
+pid_t sys_getpid() {
+	pid_t ret;
+	int errno;
+	SYSCALL0(SYSCALL_GETPID);
+	return ret;
+}
+
+pid_t sys_getppid() {
+	pid_t ret;
+	int errno;
+	SYSCALL0(SYSCALL_GETPPID);
+	return ret;
+}
+
+int sys_sigaction(int signum, const struct sigaction *act, struct sigaction *oldact) {
+	mlibc::infoLogger() << "sigaction() is a stub" << frg::endlog;
+	return 0;
+}
+
+int sys_fcntl(int fd, int request, va_list args, int *result) {
+	mlibc::infoLogger() << "fcntl() is a stub!" << frg::endlog;
+	return 0;
+}
+
+int sys_sigprocmask(int how, const sigset_t *__restrict set, sigset_t *__restrict retrieve) {
+	mlibc::infoLogger() << "sigprocmask() is a stub!" << frg::endlog;
+	return ENOSYS;
+}
+
+int sys_ttyname(int fd, char *buf, size_t size) {
+	mlibc::infoLogger() << "ttyname() is a stub!" << frg::endlog;
+	return ENOSYS;
+}
+
+int sys_setpgid(pid_t pid, pid_t pgid) {
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!" << frg::endlog;
+	return 0;
+}
+
+int sys_pselect(int num_fds, fd_set *read_set, fd_set *write_set, fd_set *except_set,
+	const struct timespec *timeout, const sigset_t *sigmask, int *num_events) {
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0;
+}
+
+int sys_isatty(int fd) {
+	// TODO: Placeholder.
+	return 0;
+}
+
+uid_t sys_getuid() {
+	mlibc::infoLogger() << "getuid() is a stub" << frg::endlog;
+	return 0;
+}
+
+uid_t sys_geteuid() {
+	mlibc::infoLogger() << "geteuid() is a stub" << frg::endlog;
+	return 0;
+}
+
+gid_t sys_getgid() {
+	mlibc::infoLogger() << "getgid() is a stub" << frg::endlog;
+	return 0;
+}
+
+gid_t sys_getegid() {
+	mlibc::infoLogger() << "getegid() is a stub" << frg::endlog;
+	return 0;
+}
+
+pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+	mlibc::infoLogger() << "getpgid() is a stub" << frg::endlog;
+	*pgid = 0;
+	return 0;
+}
+
+int sys_clock_get(int clock, time_t *secs, long *nanos) {
+	mlibc::infoLogger() << "clock_get() is a stub" << frg::endlog;
+	return 0;
+}
+
+int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+	int ret, errno;
+
+	SYSCALL3(SYSCALL_EXEC, path, argv, envp);
+
+	if (ret == -1) {
+		return errno;
+    }
+
+	return 0;
+}
+
+int sys_fork(pid_t *child) {
+    pid_t ret;
+    int errno;
+
+    SYSCALL0(SYSCALL_FORK);
+
+    if (ret == -1) {
+        return errno;
+    }
+
+    *child = ret;
+    return 0;
+}
+
+int sys_waitpid(pid_t pid, int *status, int flags, pid_t *ret_pid) {
+	pid_t ret;
+	int errno;
+
+	SYSCALL3(SYSCALL_WAIT, pid, status, flags);
+
+	if (ret == -1) {
+		return errno;
+	}
+
+	*ret_pid = ret;
+	return 0;
+}
+
+int sys_uname(struct utsname *buf) {
+	int ret, errno;
+
+	SYSCALL1(SYSCALL_UNAME, buf);
+
+	if (ret == -1) {
+		return errno;
+	}
+
+	return 0;
+}
+
+int sys_sethostname(const char *buff, size_t size) {
+	int ret, errno;
+
+	SYSCALL2(SYSCALL_SETHOSTNAME, buff, size);
+
+	if (ret == -1) {
+		return errno;
+	}
+
+	return 0;
+}
+
+int sys_getcwd(const char *buff, size_t size) {
+	char* ret;
+	int errno;
+
+	SYSCALL2(SYSCALL_GETCWD, buff, size);
+
+	if (ret == NULL) {
+		return errno;
+	}
+
+	return 0;
+}
+
+int sys_chdir(const char *buff) {
+	int ret, errno;
+
+	SYSCALL1(SYSCALL_CHDIR, buff);
+
+	if (ret == -1) {
+		return errno;
+	}
+
+	return 0;
+}
+
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+	int ret, errno;
+
+	SYSCALL3(SYSCALL_IOCTL, fd, request, arg);
+
+	if (ret == -1) {
+		return errno;
+	}
+
+   *result = ret;
+	return 0;
+}
+
+int sys_sched_yield(void) {
+	int ret, errno;
+
+	SYSCALL0(SYSCALL_SCHED_YIELD);
+
+	if (ret == -1) {
+		return errno;
+	}
+
+	return 0;
+}
+
+int sys_dup(int fd, int flags, int *newfd) {
+	(void)flags;
+
+	int ret, errno;
+
+	SYSCALL1(SYSCALL_DUP, fd);
+
+	if (ret == -1) {
+        return errno;
+	}
+	*newfd = ret;
+	return 0;
+}
+
+int sys_dup2(int fd, int flags, int newfd) {
+	int ret, errno;
+
+	if (flags) {
+		SYSCALL3(SYSCALL_DUP3, fd, newfd, flags);
+	} else {
+		SYSCALL2(SYSCALL_DUP2, fd, newfd);
+	}
+
+	if (ret == -1) {
+        return errno;
+	} else {
+		return 0;
+	}
+}
+
+int sys_tcgetattr(int fd, struct termios *attr) {
+    int ret;
+
+    if (int r = sys_ioctl(fd, TCGETS, attr, &ret) != 0) {
+        return r;
+    }
+
+    return 0;
+}
+
+int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
+    int ret;
+
+    switch (optional_action) {
+        case TCSANOW:
+            optional_action = TCSETS; break;
+        case TCSADRAIN:
+            optional_action = TCSETSW; break;
+        case TCSAFLUSH:
+            optional_action = TCSETSF; break;
+        default:
+            __ensure(!"Unsupported tcsetattr");
+    }
+
+    if (int r = sys_ioctl(fd, optional_action, (void *)attr, &ret) != 0) {
+        return r;
+    }
+
+    return 0;
+}
+
+int sys_access(const char *path, int mode) {
+	int ret, errno;
+
+	SYSCALL2(SYSCALL_ACCESS, path, mode);
+
+	if (ret == -1) {
+        return errno;
+	} else {
+        return 0;
+   }
+}
+
+int sys_getpriority(int which, id_t who, int *value) {
+	int ret, errno;
+
+	SYSCALL2(SYSCALL_GETPRIORITY, which, who);
+
+	if (ret == -1 && errno != 0) {
+        return errno;
+	} else {
+			*value = ret;
+        return 0;
+   }
+}
+
+int sys_setpriority(int which, id_t who, int prio) {
+	int ret, errno;
+
+	SYSCALL3(SYSCALL_SETPRIORITY, which, who, prio);
+
+	if (ret == -1) {
+        return errno;
+	} else {
+        return 0;
+   }
+}
+
+int sys_futex_wait(int *pointer, int expected, const struct timespec *time) STUB_ONLY
+int sys_futex_wake(int *pointer) STUB_ONLY
+
+#ifndef MLIBC_BUILDING_RTDL
+
+int sys_gethostname(char *buffer, size_t bufsize) {
+	struct utsname buf;
+	if (uname(&buf)) {
+		return -1;
+	}
+
+	strncpy(buffer, buf.nodename, bufsize);
+	return 0;
+}
+
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) {
+	int ret, errno;
+
+	switch (fsfdt) {
+		case fsfd_target::fd: {
+			// mlibc wants us to do a fstat.
+			SYSCALL2(SYSCALL_FSTAT, fd, statbuf);
+			return errno;
+		}
+		case fsfd_target::path: {
+			// mlibc wants us to do a lstat.
+			SYSCALL2(SYSCALL_LSTAT, path, statbuf);
+			return errno;
+		}
+		case fsfd_target::fd_path: {
+			// mlibc wants us to do an fstatat
+			__ensure(!"stat: Invalid fstatat");
+			__builtin_unreachable();
+		}
+		default: {
+			__ensure(!"stat: Invalid fsfdt");
+			__builtin_unreachable();
+		}
+	}
+
+	__builtin_unreachable();
+}
+
+#endif
+} // namespace mlibc
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/abi.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/abi.h
new file mode 120000
index 0000000..b466b4b
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/abi.h
@@ -0,0 +1 @@
+../../../../abis/ironclad/abi.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/access.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/access.h
new file mode 120000
index 0000000..171f75f
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/access.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/access.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/auxv.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/auxv.h
new file mode 120000
index 0000000..f9be899
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/ironclad/auxv.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/blkcnt_t.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/blkcnt_t.h
new file mode 120000
index 0000000..e9d9f1b
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/blksize_t.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/blksize_t.h
new file mode 120000
index 0000000..c6dfb6e
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/dev_t.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/dev_t.h
new file mode 120000
index 0000000..0c1143b
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/dev_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/errno.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/errno.h
new file mode 120000
index 0000000..589859f
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/errno.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/fcntl.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/fcntl.h
new file mode 120000
index 0000000..ea5323a
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/fcntl.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/gid_t.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/gid_t.h
new file mode 120000
index 0000000..6a77218
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/gid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/in.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/in.h
new file mode 120000
index 0000000..b58c683
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/in.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/ino_t.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/ino_t.h
new file mode 120000
index 0000000..10d644e
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ino_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/limits.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/limits.h
new file mode 120000
index 0000000..1aa5894
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/limits.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/mode_t.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/mode_t.h
new file mode 120000
index 0000000..29d7733
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/mode_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/nlink_t.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/nlink_t.h
new file mode 120000
index 0000000..7618c27
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/nlink_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/pid_t.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/pid_t.h
new file mode 120000
index 0000000..3fd26a7
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/pid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/reboot.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/reboot.h
new file mode 120000
index 0000000..ecc3ddb
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/x86_64/reboot.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/resource.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/resource.h
new file mode 120000
index 0000000..3e59c75
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/resource.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/seek-whence.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/seek-whence.h
new file mode 120000
index 0000000..fbd0a8f
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/ironclad/seek-whence.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/signal.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/signal.h
new file mode 120000
index 0000000..b20e511
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/signal.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/socket.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/socket.h
new file mode 120000
index 0000000..0e1d6be
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/socket.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/stat.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/stat.h
new file mode 120000
index 0000000..82642c3
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/stat.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/termios.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/termios.h
new file mode 120000
index 0000000..cfcfe76
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/termios.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/time.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/time.h
new file mode 120000
index 0000000..97f3d52
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/time.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/uid_t.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/uid_t.h
new file mode 120000
index 0000000..1113eba
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/uid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/utsname.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/utsname.h
new file mode 120000
index 0000000..17b993f
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/utsname.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/utsname.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/vm-flags.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/vm-flags.h
new file mode 120000
index 0000000..f1a985e
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/vm-flags.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/abi-bits/wait.h mlibc-workdir/sysdeps/ironclad/include/abi-bits/wait.h
new file mode 120000
index 0000000..6d911c7
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/wait.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/ironclad/include/sys/ironclad.h mlibc-workdir/sysdeps/ironclad/include/sys/ironclad.h
new file mode 100644
index 0000000..a904870
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/sys/ironclad.h
@@ -0,0 +1,41 @@
+#ifndef _IRONCLAD_H
+#define _IRONCLAD_H
+
+#include <stdint.h>
+#include <stdbool.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define FB_DIMENSIONS 1
+
+struct ironclad_fb_dimensions {
+   uint16_t width;
+   uint16_t height;
+   uint16_t pitch;
+   uint16_t bpp;
+   uint8_t  red_mask_size;
+   uint8_t  red_mask_shift;
+   uint8_t  green_mask_size;
+   uint8_t  green_mask_shift;
+   uint8_t  blue_mask_size;
+   uint8_t  blue_mask_shift;
+};
+
+#define PS2MOUSE_2_1_SCALING     1
+#define PS2MOUSE_1_1_SCALING     2
+#define PS2MOUSE_SET_RES         3
+#define PS2MOUSE_SET_SAMPLE_RATE 4
+
+struct ironclad_mouse_data {
+   int  x_variation;
+   int  y_variation;
+   bool is_left;
+   bool is_right;
+};
+#ifdef __cplusplus
+}
+#endif
+
+#endif // _IRONCLAD_H
diff --git mlibc-workdir/sysdeps/ironclad/include/sys/syscall.h mlibc-workdir/sysdeps/ironclad/include/sys/syscall.h
new file mode 100644
index 0000000..109f515
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/include/sys/syscall.h
@@ -0,0 +1,78 @@
+#ifndef _SYSCALL_H
+#define _SYSCALL_H
+
+#define SYSCALL0(NUM) ({                   \
+	asm volatile ("int $0x80"              \
+				  : "=a"(ret), "=d"(errno) \
+				  : "a"(NUM)               \
+				  : "memory");             \
+})
+
+#define SYSCALL1(NUM, ARG0) ({             \
+	asm volatile ("int $0x80"              \
+				  : "=a"(ret), "=d"(errno) \
+				  : "a"(NUM), "D"(ARG0)    \
+				  : "memory");             \
+})
+
+#define SYSCALL2(NUM, ARG0, ARG1) ({               \
+	asm volatile ("int $0x80"                      \
+				  : "=a"(ret), "=d"(errno)         \
+				  : "a"(NUM), "D"(ARG0), "S"(ARG1) \
+				  : "memory");                     \
+})
+
+#define SYSCALL3(NUM, ARG0, ARG1, ARG2) ({                    \
+	asm volatile ("int $0x80"                                 \
+				  : "=a"(ret), "=d"(errno)                    \
+				  : "a"(NUM), "D"(ARG0), "S"(ARG1), "d"(ARG2) \
+				  : "memory");                                \
+})
+
+#define SYSCALL4(NUM, ARG0, ARG1, ARG2, ARG3) ({             \
+	asm volatile ("int $0x80"                                 \
+				  : "=a"(ret), "=d"(errno)                    \
+				  : "a"(NUM), "D"(ARG0), "S"(ARG1), "d"(ARG2), "c"(ARG3) \
+				  : "memory");                                \
+})
+
+#define SYSCALL6(NUM, ARG0, ARG1, ARG2, ARG3, ARG4, ARG5) ({   \
+	register typeof(ARG4) arg_r8 asm("r8") = ARG4;             \
+	register typeof(ARG5) arg_r9 asm("r9") = ARG5;             \
+	asm volatile ("int $0x80"                                  \
+				  : "=a"(ret), "=d"(errno)                     \
+				  : "a"(NUM), "D"(ARG0), "S"(ARG1), "d"(ARG2), \
+					"c"(ARG3), "r"(arg_r8), "r"(arg_r9)        \
+				  : "memory");                                 \
+})
+
+#define SYSCALL_EXIT               0
+#define SYSCALL_SET_TCB            1
+#define SYSCALL_OPEN               2
+#define SYSCALL_CLOSE              3
+#define SYSCALL_READ               4
+#define SYSCALL_WRITE              5
+#define SYSCALL_SEEK               6
+#define SYSCALL_MMAP               7
+#define SYSCALL_MUNMAP             8
+#define SYSCALL_GETPID             9
+#define SYSCALL_GETPPID           10
+#define SYSCALL_EXEC              11
+#define SYSCALL_FORK              12
+#define SYSCALL_WAIT              13
+#define SYSCALL_UNAME             14
+#define SYSCALL_SETHOSTNAME       15
+#define SYSCALL_FSTAT             16
+#define SYSCALL_LSTAT             17
+#define SYSCALL_GETCWD            18
+#define SYSCALL_CHDIR             19
+#define SYSCALL_IOCTL             20
+#define SYSCALL_SCHED_YIELD       21
+#define SYSCALL_GETPRIORITY       22
+#define SYSCALL_SETPRIORITY       23
+#define SYSCALL_DUP               24
+#define SYSCALL_DUP2              25
+#define SYSCALL_DUP3              26
+#define SYSCALL_ACCESS            27
+
+#endif // _SYSCALL_H
diff --git mlibc-workdir/sysdeps/ironclad/meson.build mlibc-workdir/sysdeps/ironclad/meson.build
new file mode 100644
index 0000000..26fcbe5
--- /dev/null
+++ mlibc-workdir/sysdeps/ironclad/meson.build
@@ -0,0 +1,59 @@
+
+rtdl_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp'
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/abi.h',
+		'include/abi-bits/access.h',
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/reboot.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/wait.h',
+		'include/abi-bits/limits.h',
+      'include/abi-bits/utsname.h',
+		subdir: 'abi-bits'
+	)
+	install_headers(
+		'include/sys/ironclad.h',
+		'include/sys/syscall.h',
+		subdir: 'sys'
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'crt-x86_64/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
+
