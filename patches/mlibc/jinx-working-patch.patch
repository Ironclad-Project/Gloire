diff --git mlibc-clean/abis/ironclad/vm-flags.h mlibc-workdir/abis/ironclad/vm-flags.h
index 5725ed0..0c894cd 100644
--- mlibc-clean/abis/ironclad/vm-flags.h
+++ mlibc-workdir/abis/ironclad/vm-flags.h
@@ -14,7 +14,6 @@
 #define MAP_ANON      0x08
 #define MAP_ANONYMOUS 0x08
 #define MAP_NORESERVE 0x10
-#define MAP_WC        (1 << 4)
 
 #define MS_ASYNC 0x01
 #define MS_SYNC 0x02
diff --git mlibc-clean/meson.build mlibc-workdir/meson.build
index a1e526b..9515929 100644
--- mlibc-clean/meson.build
+++ mlibc-workdir/meson.build
@@ -239,6 +239,7 @@ elif host_machine.system() == 'managarm'
 elif host_machine.system() == 'ironclad'
 	rtld_include_dirs += include_directories('sysdeps/ironclad/include')
 	libc_include_dirs += include_directories('sysdeps/ironclad/include')
+	internal_conf.set10('MLIBC_MMAP_ALLOCATE_DSO', true)
 	subdir('sysdeps/ironclad')
 elif host_machine.system() == 'keyronex'
 	rtld_include_dirs += include_directories('sysdeps/keyronex/include')
diff --git mlibc-clean/options/posix/generic/spawn.cpp mlibc-workdir/options/posix/generic/spawn.cpp
index cf7edfc..cbc2cb7 100644
--- mlibc-clean/options/posix/generic/spawn.cpp
+++ mlibc-workdir/options/posix/generic/spawn.cpp
@@ -12,6 +12,7 @@
 
 #include <bits/ensure.h>
 #include <mlibc/debug.hpp>
+#include <mlibc/posix-sysdeps.hpp>
 
 /*
  * Musl places this in a seperate header called fdop.h
@@ -192,6 +193,15 @@ int posix_spawn(pid_t *__restrict res, const char *__restrict path,
 		const posix_spawn_file_actions_t *file_actions,
 		const posix_spawnattr_t *__restrict attrs,
 		char *const argv[], char *const envp[]) {
+
+	if(mlibc::sys_posix_spawn) {
+		int e = mlibc::sys_posix_spawn(res, path, file_actions, attrs, argv, envp);
+		if(e) {
+			errno = e;
+			return -1;
+		}
+	}
+
 	pid_t pid;
 	int ec = 0, cs;
 	struct args args;
@@ -259,7 +269,7 @@ int posix_spawnattr_destroy(posix_spawnattr_t *) {
 }
 
 int posix_spawnattr_setflags(posix_spawnattr_t *attr, short flags) {
-	const unsigned all_flags = 
+	const unsigned all_flags =
 			POSIX_SPAWN_RESETIDS |
 			POSIX_SPAWN_SETPGROUP |
 			POSIX_SPAWN_SETSIGDEF |
@@ -370,7 +380,7 @@ int posix_spawnp(pid_t *__restrict pid, const char *__restrict file,
 	posix_spawnattr_t spawnp_attr = {};
 	if(attrp)
 		spawnp_attr = *attrp;
-	spawnp_attr.__fn = (void *)execvpe;	
+	spawnp_attr.__fn = (void *)execvpe;
 	return posix_spawn(pid, file, file_actions, &spawnp_attr, argv, envp);
 }
 
diff --git mlibc-clean/options/posix/generic/sys-shm.cpp mlibc-workdir/options/posix/generic/sys-shm.cpp
index 8782ae6..bfacac2 100644
--- mlibc-clean/options/posix/generic/sys-shm.cpp
+++ mlibc-workdir/options/posix/generic/sys-shm.cpp
@@ -4,6 +4,7 @@
 #include <bits/ensure.h>
 #include <mlibc/debug.hpp>
 #include <mlibc/posix-sysdeps.hpp>
+#include <sys/syscall.h>
 
 void *shmat(int shmid, const void *shmaddr, int shmflg) {
 	void *ret;
@@ -17,11 +18,7 @@ void *shmat(int shmid, const void *shmaddr, int shmflg) {
 
 int shmctl(int shmid, int cmd, struct shmid_ds *buf) {
 	int ret;
-	auto sysdep = MLIBC_CHECK_OR_ENOSYS(mlibc::sys_shmctl, -1);
-	if(int e = sysdep(&ret, shmid, cmd, buf); e) {
-		errno = e;
-		return -1;
-	}
+	SYSCALL3(SYSCALL_SHMCTL, shmid, cmd, buf);
 	return ret;
 }
 
diff --git mlibc-clean/options/posix/include/mlibc/posix-sysdeps.hpp mlibc-workdir/options/posix/include/mlibc/posix-sysdeps.hpp
index 51c4e5c..cdba098 100644
--- mlibc-clean/options/posix/include/mlibc/posix-sysdeps.hpp
+++ mlibc-workdir/options/posix/include/mlibc/posix-sysdeps.hpp
@@ -31,6 +31,7 @@
 #include <termios.h>
 #include <time.h>
 #include <ucontext.h>
+#include <spawn.h>
 
 namespace [[gnu::visibility("hidden")]] mlibc {
 
@@ -101,6 +102,7 @@ int sys_close(int fd);
 [[gnu::weak]] int sys_sleep(time_t *secs, long *nanos);
 [[gnu::weak]] int sys_fork(pid_t *child);
 [[gnu::weak]] int sys_execve(const char *path, char *const argv[], char *const envp[]);
+[[gnu::weak]] int sys_posix_spawn(pid_t *pid, const char *path, const posix_spawn_file_actions_t *file_actions, const posix_spawnattr_t *attrs, char *const argv[], char *const envp[]);
 [[gnu::weak]] int sys_pselect(int num_fds, fd_set *read_set, fd_set *write_set,
 		fd_set *except_set, const struct timespec *timeout, const sigset_t *sigmask, int *num_events);
 [[gnu::weak]] int sys_getrusage(int scope, struct rusage *usage);
diff --git mlibc-clean/options/rtld/generic/linker.cpp mlibc-workdir/options/rtld/generic/linker.cpp
index 33cd1b9..fbb98d4 100644
--- mlibc-clean/options/rtld/generic/linker.cpp
+++ mlibc-workdir/options/rtld/generic/linker.cpp
@@ -521,6 +521,7 @@ frg::expected<LinkerError, void> ObjectRepository::_fetchFromFile(SharedObject *
 		return LinkerError::outOfMemory;
 	}
 
+	mlibc::sys_vm_unmap(mappedAddr, highest_address - object->baseAddress);
 	object->baseAddress = reinterpret_cast<uintptr_t>(mappedAddr);
 #else
 	object->baseAddress = libraryBase;
diff --git mlibc-clean/sysdeps/ironclad/generic/generic.cpp mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
index 68e6fee..d41cce6 100644
--- mlibc-clean/sysdeps/ironclad/generic/generic.cpp
+++ mlibc-workdir/sysdeps/ironclad/generic/generic.cpp
@@ -25,13 +25,9 @@ extern "C" void __mlibc_sigret(void);
 namespace mlibc {
 
 void sys_libc_log(const char *message) {
-#ifdef __MLIBC_DEBUG
 	ssize_t unused;
-	sys_write(2, message, strlen(message), &unused);
-	sys_write(2, "\n", 1, &unused);
-#else
-	(void)message;
-#endif
+	sys_write(1, message, strlen(message), &unused);
+	sys_write(1, "\n", 1, &unused);
 }
 
 void sys_libc_panic() {
@@ -200,6 +196,16 @@ int sys_ftruncate (int fd, size_t size) {
 	return errno;
 }
 
+int sys_fallocate(int fd, off_t offset, size_t size) {
+	if (offset < 0 || size == 0) {
+		return EINVAL;
+	}
+
+	int ret, errno;
+	SYSCALL2(SYSCALL_TRUNCATE, fd, offset + size);
+	return errno;
+}
+
 int sys_flock(int fd, int options) {
 	//  XXX: Shouldnt this use F_SETLKW and F_SETLK only when LOCK_NB ?
 	struct flock lock;
@@ -268,6 +274,12 @@ int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offse
 	return errno;
 }
 
+int sys_posix_madvise(void *addr, size_t length, int advice) {
+	int ret, errno;
+	SYSCALL3(SYSCALL_MADVISE, addr, length, advice);
+	return errno;
+}
+
 int sys_getsockopt(int fd, int layer, int number, void *__restrict buffer, socklen_t *__restrict size) {
 	int ret, errno;
 	SYSCALL5(SYSCALL_GETSOCKOPT, fd, layer, number, buffer, size);
@@ -419,6 +431,47 @@ int sys_fork(pid_t *child) {
 	return 0;
 }
 
+struct spawn_args {
+    uint64_t path;
+    uint64_t path_len;
+    uint64_t argv;
+    uint64_t argv_len;
+    uint64_t envp;
+    uint64_t envp_len;
+    uint64_t caps;
+    uint64_t file_actions;
+    uint64_t file_action_count;
+    uint64_t spawn_actions;
+    uint64_t spawn_action_count;
+};
+
+int sys_posix_spawn(pid_t *pid, const char *path, const posix_spawn_file_actions_t *file_actions,
+	const posix_spawnattr_t *attrs, char *const argv[], char *const envp[]) {
+
+	int argv_len, envp_len;
+	for (argv_len = 0; argv[argv_len] != NULL; argv_len++);
+	for (envp_len = 0; envp[envp_len] != NULL; envp_len++);
+
+	struct spawn_args arg;
+	arg.path               = (uint64_t)path;
+	arg.path_len           = (uint64_t)strlen(path);
+	arg.argv               = (uint64_t)argv;
+	arg.argv_len           = (uint64_t)argv_len;
+	arg.envp               = (uint64_t)envp;
+	arg.envp_len           = (uint64_t)envp_len;
+	arg.caps               = 0;
+	arg.file_actions       = 0;
+	arg.file_action_count  = 0;
+	arg.spawn_actions      = 0;
+	arg.spawn_action_count = 0;
+
+	pid_t ret;
+	int errno;
+	SYSCALL1(SYSCALL_SPAWN, &arg);
+	*pid = ret;
+	return errno;
+}
+
 int sys_getrlimit(int resource, struct rlimit *limit) {
 	uint64_t ret, errno;
 	SYSCALL1(SYSCALL_GETRLIMIT, resource);
@@ -692,15 +745,14 @@ int sys_mkdirat(int dirfd, const char *path, mode_t mode) {
 int sys_rmdir(const char* path){
 	int ret, errno;
 	size_t path_len = strlen (path);
-	SYSCALL3(SYSCALL_UNLINK, AT_FDCWD, path, path_len);
+	SYSCALL4(SYSCALL_UNLINK, AT_FDCWD, path, path_len, AT_REMOVEDIR);
 	return errno;
 }
 
 int sys_unlinkat(int fd, const char *path, int flags) {
-	(void)flags;
 	int ret, errno;
 	size_t path_len = strlen (path);
-	SYSCALL3(SYSCALL_UNLINK, fd, path, path_len);
+	SYSCALL4(SYSCALL_UNLINK, fd, path, path_len, flags);
 	return errno;
 }
 
@@ -713,8 +765,9 @@ int sys_link(const char* srcpath, const char* destpath) {
 }
 
 int sys_socket(int domain, int type, int protocol, int *fd) {
+	(void)protocol;
 	int ret, errno;
-	SYSCALL3(SYSCALL_SOCKET, domain, type, protocol);
+	SYSCALL2(SYSCALL_SOCKET, domain, type);
 	if (ret != -1) {
 		*fd = ret;
 		return 0;
@@ -723,6 +776,13 @@ int sys_socket(int domain, int type, int protocol, int *fd) {
 	}
 }
 
+int sys_socketpair(int domain, int type, int protocol, int *fds) {
+	(void)protocol;
+	int ret, errno;
+	SYSCALL3(SYSCALL_SOCKETPAIR, domain, type, fds);
+	return errno;
+}
+
 uid_t sys_getuid() {
 	uint64_t ret, errno;
 	SYSCALL0(SYSCALL_GETUID);
@@ -1157,6 +1217,12 @@ int sys_sysconf(int num, long *rret) {
 	int ret, errno;
 
 	switch (num) {
+		case _SC_LINE_MAX:
+			return 2048;
+		case _SC_NGROUPS_MAX:
+			return 0x10000;
+		case _SC_CHILD_MAX:
+			return 30;
 		case _SC_NPROCESSORS_CONF:
 			SYSCALL1(SYSCALL_GETCPUINFO, &cpu);
 			if (ret == 0) {
diff --git mlibc-clean/sysdeps/ironclad/include/sys/syscall.h mlibc-workdir/sysdeps/ironclad/include/sys/syscall.h
index 9c576dc..409a817 100644
--- mlibc-clean/sysdeps/ironclad/include/sys/syscall.h
+++ mlibc-workdir/sysdeps/ironclad/include/sys/syscall.h
@@ -124,6 +124,8 @@
 #define SYSCALL_MEMINFO             112
 #define SYSCALL_LISTPCI             113
 #define SYSCALL_GETCPUINFO          114
+#define SYSCALL_SOCKETPAIR          115
+#define SYSCALL_MADVISE             116
 
 #if defined(__x86_64__)
 #define SYSCALL0(NUM) ({ \
