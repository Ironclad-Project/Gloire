diff --git m4-clean/lib/getlocalename_l-unsafe.c m4-workdir/lib/getlocalename_l-unsafe.c
index 66b2c74..b7e6610 100644
--- m4-clean/lib/getlocalename_l-unsafe.c
+++ m4-workdir/lib/getlocalename_l-unsafe.c
@@ -473,6 +473,8 @@ getlocalename_l_unsafe (int category, locale_t locale)
       struct gl_locale_category_t *plc =
         &locale->category[gl_log2_lcmask_to_index (gl_log2_lc_mask (category))];
       return (struct string_with_storage) { plc->name, STORAGE_OBJECT };
+#elif defined __mlibc__
+      return (struct string_with_storage) { "C", STORAGE_INDEFINITE };
 #elif __GLIBC__ >= 2 && !defined __UCLIBC__
       /* Work around an incorrect definition of the _NL_LOCALE_NAME macro in
          glibc < 2.12.
diff --git m4-clean/tests/strerror_r.c m4-workdir/tests/strerror_r.c
index 23106ea..e036bee 100644
--- m4-clean/tests/strerror_r.c
+++ m4-workdir/tests/strerror_r.c
@@ -21,7 +21,7 @@
 
 /* Enable declaration of sys_nerr and sys_errlist in <errno.h> on NetBSD.  */
 #define _NETBSD_SOURCE 1
-
+#undef _GNU_SOURCE
 /* Specification.  */
 #include <string.h>
 
@@ -181,7 +181,7 @@ strerror_r (int errnum, char *buf, size_t buflen)
              allow us to determine whether to return ERANGE or 0.  Thus we
              need to pass a sufficiently large buffer.  */
           char stackbuf[80];
-          char *errstring = strerror_r (errnum, stackbuf, sizeof stackbuf);
+          char *errstring = (char *)strerror_r (errnum, stackbuf, sizeof stackbuf);
           ret = errstring ? safe_copy (buf, buflen, errstring) : errno;
         }
     }
