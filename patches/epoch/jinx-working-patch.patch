diff --git epoch-clean/src/actions.c epoch-workdir/src/actions.c
index 92c56e2..fe262e9 100644
--- epoch-clean/src/actions.c
+++ epoch-workdir/src/actions.c
@@ -35,57 +35,6 @@ struct _EnvVarList *GlobalEnvVars;
 /*Functions.*/
 static void MountVirtuals(void)
 {
-	enum { MVIRT_PROC, MVIRT_SYSFS, MVIRT_DEVFS, MVIRT_PTS, MVIRT_SHM };
-	
-	const char *FSTypes[5] = { "proc", "sysfs", "devtmpfs", "devpts", "tmpfs" };
-	const char *MountLocations[5] = { "/proc", "/sys", "/dev", "/dev/pts", "/dev/shm" };
-	const char *PTSArg = "gid=5,mode=620";
-	Bool HeavyPermissions[5] = { true, true, true, true, false };
-	mode_t PermissionSet[2] = { (S_IRWXU | S_IRWXG | S_IRWXO), (S_IRWXU | S_IRGRP | S_IXGRP | S_IXOTH) };
-	short Inc = 0;
-	
-	for (; Inc < 5; ++Inc)
-	{
-		if (AutoMountOpts[Inc])
-		{
-			if (AutoMountOpts[Inc] & MOUNTVIRTUAL_MKDIR)
-			{ /*If we need to create a directory, do it.*/
-				if (mkdir(MountLocations[Inc], PermissionSet[HeavyPermissions[Inc]] != 0))
-				{
-					char TmpBuf[1024];
-					
-					snprintf(TmpBuf, sizeof TmpBuf, "Failed to create directory for %s!", MountLocations[Inc]);
-					SpitWarning(TmpBuf);
-				} /*No continue statement because it might already exist*/
-			}	/*and we might be able to mount it anyways.*/
-			
-			if (mount(FSTypes[Inc], MountLocations[Inc], FSTypes[Inc], 0, (Inc == MVIRT_PTS ? PTSArg : NULL)) != 0)
-			{
-				char TmpBuf[1024];
-
-				if (AutoMountOpts[Inc] & MOUNTVIRTUAL_NOERROR)
-				{
-					snprintf(TmpBuf, sizeof TmpBuf, "Failed to mount virtual filesystem %s, but not an error.", MountLocations[Inc]);
-					WriteLogLine(TmpBuf, true);
-				}
-				else
-				{
-					snprintf(TmpBuf, sizeof TmpBuf, "Failed to mount virtual filesystem %s!", MountLocations[Inc]);
-					SpitWarning(TmpBuf);
-					WriteLogLine(TmpBuf, true);
-				}
-				continue;
-			}
-			else
-			{
-				char TmpBuf[1024];
-				
-				snprintf(TmpBuf, sizeof TmpBuf, "Mounted virtual filesystem %s", MountLocations[Inc]);
-				WriteLogLine(TmpBuf, true);
-			}
-		}
-		
-	}
 }
 
 static void PrimaryLoop(void)
@@ -669,7 +618,9 @@ void PerformPivotRoot(const char *NewRoot, const char *OldRootDir)
 	sync();
 
 	/*pivot_root now.*/
-	if (syscall(SYS_pivot_root, NewRoot, OldRootDir) != 0)
+   int ret, errno;
+   SYSCALL4(SYSCALL_PIVOT_ROOT, NewRoot, strlen(NewRoot), OldRootDir, strlen(OldRootDir));
+	if (ret != 0)
 	{
 		SpitError("Failed to pivot_root()!");
 		EmergencyShell();
diff --git epoch-clean/src/epoch.h epoch-workdir/src/epoch.h
index 8130386..66800b7 100644
--- epoch-clean/src/epoch.h
+++ epoch-workdir/src/epoch.h
@@ -67,9 +67,9 @@
 #define VERSIONSTRING "Epoch Init System 1.3.0 \"Fluoxetine\""
 
 /*Power control magic.*/
-#define OSCTL_REBOOT 0x1234567
-#define OSCTL_HALT 0xcdef0123
-#define OSCTL_POWEROFF 0x4321fedc
+#define OSCTL_REBOOT 3
+#define OSCTL_HALT 1
+#define OSCTL_POWEROFF 2
 #define OSCTL_DISABLE_CTRLALTDEL 0 /*Now isn't this hilarious. It's zero.*/
 #define OSCTL_ENABLE_CTRLALTDEL 0x89abcdef
 
diff --git epoch-clean/src/main.c epoch-workdir/src/main.c
index 62bff39..28b2123 100644
--- epoch-clean/src/main.c
+++ epoch-workdir/src/main.c
@@ -17,6 +17,8 @@
 #include <sys/reboot.h>
 #include <sys/shm.h>
 #include <sys/stat.h>
+#include <utmpx.h>
+#include <sys/time.h>
 
 #ifndef NO_EXECINFO
 #include <execinfo.h>
@@ -1746,6 +1748,19 @@ int main(int argc, char **argv)
 		const Bool NoKArgs = NoKArgsFileExists();
 		const char *TConfigFile = NoKArgs ? NULL : getenv("epochconfig");
 		
+        /* Add utmpx entry */
+        struct utmpx entry;
+        entry.ut_type = BOOT_TIME;
+        if (gettimeofday(&entry.ut_tv, NULL)) {
+            perror("epoch: could not get time of day");
+        }
+
+        setutxent();
+        if (pututxline(&entry) == NULL) {
+            perror("epoch: could not set BOOT_TIME entry");
+        }
+        endutxent();
+
 		if (TConfigFile != NULL)
 		{ /*Someone specified a config file from disk?*/
 			snprintf(ConfigFile, MAX_LINE_SIZE, "%s", TConfigFile);
diff --git epoch-clean/src/modes.c epoch-workdir/src/modes.c
index b52068c..1fb2fc8 100644
--- epoch-clean/src/modes.c
+++ epoch-workdir/src/modes.c
@@ -137,6 +137,19 @@ ReturnCode ObjControl(const char *ObjectID, const char *MemBusSignal)
 	}
 }
 
+#include <sys/syscall.h>
+#include <errno.h>
+#define SC_LIST_PROCS 8
+
+struct procinfo {
+    char     id[20];
+    uint16_t id_len;
+    uint16_t ppid;
+    uint16_t pid;
+    uint32_t uid;
+    uint32_t flags;
+} __attribute__((packed));
+
 ReturnCode EmulKillall5(unsigned InSignal)
 { /*Used as the killall5 utility.*/
 	DIR *ProcDir;
@@ -149,37 +162,23 @@ ReturnCode EmulKillall5(unsigned InSignal)
 		SpitError("EmulKillall5() Bad value for unsigned InSignal.");
 	}
 	
-	/*We get everything from /proc.*/
-	if (!(ProcDir = opendir("/proc/")))
-	{
-		return FAILURE;
-	}
-	
 	/*Stop everything.*/
 	kill(-1, SIGSTOP);
 	
-	while ((CurDir = readdir(ProcDir)))
-	{
-		if (AllNumeric(CurDir->d_name) && CurDir->d_type == 4)
-		{			
-			CurPID = atol(CurDir->d_name); /*Convert the new PID to a true number.*/
-			
-			if (CurPID == 1 || CurPID == OurPID)
-			{ /*Don't try to kill init, or us.*/
-				continue;
-			}
-			
-			
-			if (getsid(CurPID) == OurSID)
-			{ /*It's in our session ID, so don't touch it.*/
-				continue;
-			}
-			
-			/*We made it this far, must be safe to nuke this process.*/
-			kill(CurPID, InSignal); /*Actually send the kill, stop, whatever signal.*/
+    int ret;
+    struct procinfo *buffer = malloc(50 * sizeof(struct procinfo));
+    SYSCALL3(SYSCALL_SYSCONF, SC_LIST_PROCS, buffer, 50 * sizeof(struct procinfo));
+    if (ret == -1) {
+        return FAILURE;
+    } else if (ret > 50) {
+        return FAILURE;
+    }
+
+    for (int i = 0; i < ret; i++) {
+        if (buffer[i].pid != 1 && buffer[i].pid != OurPID && getsid(CurPID) != OurSID) {
+            kill(buffer[i].pid, InSignal);
 		}
 	}
-	closedir(ProcDir);
 	
 	/*Start it up again.*/
 	kill(-1, SIGCONT);
