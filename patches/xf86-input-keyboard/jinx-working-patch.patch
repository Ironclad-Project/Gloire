diff -urN --no-dereference xf86-input-keyboard-clean/configure xf86-input-keyboard-workdir/configure
--- xf86-input-keyboard-clean/configure
+++ xf86-input-keyboard-workdir/configure
@@ -664,6 +664,8 @@
 SOLARIS_TRUE
 BSD_FALSE
 BSD_TRUE
+IRONCLAD_FALSE
+IRONCLAD_TRUE
 OS_FLAGS
 inputdir
 XORG_LIBS
@@ -19840,6 +19842,10 @@
 
 # The keyboard driver code is O/S specific
 case $host_os in
+  ironclad*)
+    IS_IRONCLAD="yes"
+    ;;
+
   linux*)
     as_fn_error $? "This is not the keyboard driver you are looking for. Use evdev or libinput." "$LINENO" 5
     ;;
@@ -19878,6 +19884,14 @@
 esac
 
 
+ if test "x$IS_IRONCLAD" = xyes; then
+  IRONCLAD_TRUE=
+  IRONCLAD_FALSE='#'
+else
+  IRONCLAD_TRUE='#'
+  IRONCLAD_FALSE=
+fi
+
  if test "x$IS_BSD" = xyes; then
   BSD_TRUE=
   BSD_FALSE='#'
@@ -20053,6 +20067,10 @@
   as_fn_error $? "conditional \"am__fastdepCC\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
+if test -z "${IRONCLAD_TRUE}" && test -z "${IRONCLAD_FALSE}"; then
+  as_fn_error $? "conditional \"IRONCLAD\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
 if test -z "${BSD_TRUE}" && test -z "${BSD_FALSE}"; then
   as_fn_error $? "conditional \"BSD\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
diff -urN --no-dereference xf86-input-keyboard-clean/src/Makefile.in xf86-input-keyboard-workdir/src/Makefile.in
--- xf86-input-keyboard-clean/src/Makefile.in
+++ xf86-input-keyboard-workdir/src/Makefile.in
@@ -113,6 +113,7 @@
 @BSD_TRUE@am__append_1 = $(BSD_SRCS)
 @SOLARIS_TRUE@am__append_2 = $(SOLARIS_SRCS)
 @HURD_TRUE@am__append_3 = $(HURD_SRCS)
+@IRONCLAD_TRUE@am__append_4 = $(IRONCLAD_SRCS)
 subdir = src
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/configure.ac
@@ -155,15 +156,17 @@
 kbd_drv_la_DEPENDENCIES = $(am__DEPENDENCIES_1)
 am__kbd_drv_la_SOURCES_DIST = kbd.c xf86OSKbd.h xf86Keymap.h \
 	atKeynames.h bsd_KbdMap.c bsd_kbd.c bsd_kbd.h at_scancode.c \
-	sun_kbd.c sun_kbd.h sun_kbdMap.c hurd_kbd.c
+	sun_kbd.c sun_kbd.h sun_kbdMap.c hurd_kbd.c ironclad_kbd.c
 am__objects_1 = bsd_KbdMap.lo bsd_kbd.lo at_scancode.lo
 @BSD_TRUE@am__objects_2 = $(am__objects_1)
 am__objects_3 = sun_kbd.lo sun_kbdMap.lo
 @SOLARIS_TRUE@am__objects_4 = $(am__objects_3)
 am__objects_5 = hurd_kbd.lo at_scancode.lo
 @HURD_TRUE@am__objects_6 = $(am__objects_5)
+am__objects_7 = ironclad_kbd.lo at_scancode.lo
+@IRONCLAD_TRUE@am__objects_8 = $(am__objects_7)
 am_kbd_drv_la_OBJECTS = kbd.lo $(am__objects_2) $(am__objects_4) \
-	$(am__objects_6)
+	$(am__objects_6) $(am__objects_8)
 kbd_drv_la_OBJECTS = $(am_kbd_drv_la_OBJECTS)
 AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
@@ -189,7 +192,7 @@
 am__maybe_remake_depfiles = depfiles
 am__depfiles_remade = ./$(DEPDIR)/at_scancode.Plo \
 	./$(DEPDIR)/bsd_KbdMap.Plo ./$(DEPDIR)/bsd_kbd.Plo \
-	./$(DEPDIR)/hurd_kbd.Plo ./$(DEPDIR)/kbd.Plo \
+	./$(DEPDIR)/hurd_kbd.Plo ./$(DEPDIR)/ironclad_kbd.Plo ./$(DEPDIR)/kbd.Plo \
 	./$(DEPDIR)/sun_kbd.Plo ./$(DEPDIR)/sun_kbdMap.Plo
 am__mv = mv -f
 COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
@@ -388,13 +391,14 @@
 kbd_drv_la_LTLIBRARIES = kbd_drv.la
 kbd_drv_la_LDFLAGS = -avoid-version -module
 kbd_drv_la_SOURCES = kbd.c xf86OSKbd.h xf86Keymap.h atKeynames.h \
-	$(am__append_1) $(am__append_2) $(am__append_3)
+	$(am__append_1) $(am__append_2) $(am__append_3) $(am__append_4)
 kbd_drv_la_LIBADD = $(XORG_LIBS)
 kbd_drv_ladir = @inputdir@
+IRONCLAD_SRCS = ironclad_kbd.c at_scancode.c
 BSD_SRCS = bsd_KbdMap.c bsd_kbd.c bsd_kbd.h at_scancode.c
 HURD_SRCS = hurd_kbd.c at_scancode.c
 SOLARIS_SRCS = sun_kbd.c sun_kbd.h sun_kbdMap.c
-EXTRA_DIST = $(BSD_SRCS) $(HURD_SRCS) $(SOLARIS_SRCS)
+EXTRA_DIST = $(IRONCLAD_SRCS) $(BSD_SRCS) $(HURD_SRCS) $(SOLARIS_SRCS)
 all: all-am
 
 .SUFFIXES:
@@ -475,6 +479,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bsd_KbdMap.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bsd_kbd.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hurd_kbd.Plo@am__quote@ # am--include-marker
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ironclad_kbd.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kbd.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sun_kbd.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sun_kbdMap.Plo@am__quote@ # am--include-marker
@@ -643,6 +648,7 @@
 	-rm -f ./$(DEPDIR)/bsd_KbdMap.Plo
 	-rm -f ./$(DEPDIR)/bsd_kbd.Plo
 	-rm -f ./$(DEPDIR)/hurd_kbd.Plo
+	-rm -f ./$(DEPDIR)/ironclad_kbd.Plo
 	-rm -f ./$(DEPDIR)/kbd.Plo
 	-rm -f ./$(DEPDIR)/sun_kbd.Plo
 	-rm -f ./$(DEPDIR)/sun_kbdMap.Plo
@@ -695,6 +701,7 @@
 	-rm -f ./$(DEPDIR)/bsd_KbdMap.Plo
 	-rm -f ./$(DEPDIR)/bsd_kbd.Plo
 	-rm -f ./$(DEPDIR)/hurd_kbd.Plo
+	-rm -f ./$(DEPDIR)/ironclad_kbd.Plo
 	-rm -f ./$(DEPDIR)/kbd.Plo
 	-rm -f ./$(DEPDIR)/sun_kbd.Plo
 	-rm -f ./$(DEPDIR)/sun_kbdMap.Plo
diff -urN --no-dereference xf86-input-keyboard-clean/src/ironclad_kbd.c xf86-input-keyboard-workdir/src/ironclad_kbd.c
--- xf86-input-keyboard-clean/src/ironclad_kbd.c	1970-01-01 01:00:00.000000000 +0100
+++ xf86-input-keyboard-workdir/src/ironclad_kbd.c
@@ -0,0 +1,108 @@
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <X11/X.h>
+#include <xorg-server.h>
+
+#include "compiler.h"
+
+#include "xf86.h"
+#include "xf86Priv.h"
+#include "xf86_OSlib.h"
+
+#include "atKeynames.h"
+#include "xf86Keymap.h"
+#include "xf86OSKbd.h"
+#include "xf86Xinput.h"
+
+#include <assert.h>
+#include <errno.h>
+#include <stdio.h>
+#include <sys/file.h>
+#include <sys/ioctl.h>
+#include <sys/time.h>
+
+static int KbdOn(InputInfoPtr pInfo, int what) {
+    return Success;
+}
+
+static int KbdOff(InputInfoPtr pInfo, int what) {
+    printf("kbdOff is a stub!\n");
+    return -1;
+}
+
+static void SoundKbdBell(InputInfoPtr pInfo, int loudness, int pitch, int duration) {
+    printf("SoundKbdBell is a stub!\n");
+}
+
+static void SetKbdLeds(InputInfoPtr pInfo, int leds) {
+    printf("SetKbdLeds: is a stub!\n");
+}
+
+static int GetKbdLeds(InputInfoPtr pInfo) {
+    printf("GetKbdLeds is a stub!\n");
+    return -1;
+}
+
+// Save the initial keyboard state. This function is called at the start
+// of each server generation.
+static int KbdInit(InputInfoPtr pInfo, int what) {
+    return Success;
+}
+
+static void KbdGetMapping(InputInfoPtr pInfo, KeySymsPtr pKeySyms, CARD8 *pModMap) {
+    printf("KbdGetMapping is a stub!\n");
+}
+
+static void ReadInput(InputInfoPtr pInfo) {
+    KbdDevPtr pKbd = (KbdDevPtr) pInfo->private;
+
+    uint8_t scancodes[64];
+    ssize_t result = read(pInfo->fd, scancodes, sizeof(scancodes));
+    if (result > 0) {
+        for (ssize_t i = 0; i < result; i++) {
+            pKbd->PostEvent(pInfo, scancodes[i] & 0x7f, scancodes[i] & 0x80 ? FALSE : TRUE);
+        }
+    }
+}
+
+static Bool OpenKeyboard(InputInfoPtr pInfo) {
+    char *kbdPath = xf86SetStrOption(pInfo->options, "Device", "/dev/ps2keyboard");
+    Bool ret;
+
+    pInfo->fd = open(kbdPath, O_RDONLY | O_NONBLOCK);
+
+    if (pInfo->fd == -1) {
+        xf86Msg(X_ERROR, "%s: cannot open \"%s\"\n", pInfo->name, kbdPath);
+        ret = FALSE;
+    } else {
+        xf86MsgVerb(X_INFO, 3, "%s: opened device \"%s\"\n", pInfo->name, kbdPath);
+        pInfo->read_input = ReadInput;
+        ret = TRUE;
+
+        // in case it wasn't set and we fell back to default.
+        xf86ReplaceStrOption(pInfo->options, "Device", kbdPath);
+    }
+
+    free(kbdPath);
+    return ret;
+}
+
+Bool xf86OSKbdPreInit(InputInfoPtr pInfo) {
+    KbdDevPtr pKbd = pInfo->private;
+
+    pKbd->KbdInit       = KbdInit;
+    pKbd->KbdOn         = KbdOn;
+    pKbd->KbdOff        = KbdOff;
+    pKbd->Bell          = SoundKbdBell;
+    pKbd->SetLeds       = SetKbdLeds;
+    pKbd->GetLeds       = GetKbdLeds;
+    pKbd->KbdGetMapping = KbdGetMapping;
+    pKbd->OpenKeyboard = OpenKeyboard;
+
+    pKbd->RemapScanCode = NULL;
+    pKbd->private = NULL;
+
+    return TRUE;
+}
